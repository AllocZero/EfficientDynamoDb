(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=i,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var i=n(3),a=n(7),r=(n(0),n(116)),o={id:"write",title:"Writing Data",slug:"../dev-guide/high-level/write"},l={unversionedId:"dev_guide/high_level/write",id:"dev_guide/high_level/write",isDocsHomePage:!1,title:"Writing Data",description:"DynamoDB provides two primary operations for writing data:",source:"@site/docs/dev_guide/high_level/write.md",slug:"/dev_guide/dev-guide/high-level/write",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/write",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/dev_guide/high_level/write.md",version:"current",sidebar:"someSidebar",previous:{title:"Reading Data",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/read"},next:{title:"Batch Operations",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch"}},c=[{value:"PutItem",id:"putitem",children:[]},{value:"UpdateItem",id:"updateitem",children:[]},{value:"DeleteItem",id:"deleteitem",children:[]},{value:"Conditions",id:"conditions",children:[]},{value:"Compatibility API",id:"compatibility-api",children:[{value:"SaveAsync",id:"saveasync",children:[]},{value:"DeleteAsync",id:"deleteasync",children:[]}]},{value:"Useful links",id:"useful-links",children:[]}],s={toc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"DynamoDB provides two primary operations for writing data:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"PutItem")," - Creates a new item, or replaces an old item with a new item."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"UpdateItem")," - Adds or updates specific attributes of an item."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"DeleteItem")," - Deletes an item from the database.")),Object(r.b)("p",null,"DynamoDB also supports a ",Object(r.b)("inlineCode",{parentName:"p"},"BatchWriteItem")," operation for executing up to 25 ",Object(r.b)("inlineCode",{parentName:"p"},"PutItem")," operations in a single request.\nIt's covered in ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch"},"batch operations guide"),"."),Object(r.b)("h2",{id:"putitem"},"PutItem"),Object(r.b)("p",null,"Creates a new item or replaces an old item with a new item.\nIf an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.PutItemAsync(new UserEntity("John", "Doe"));\n')),Object(r.b)("p",null,"You can return the item's attribute values in the same operation by setting ",Object(r.b)("inlineCode",{parentName:"p"},"ReturnValues")," in fluent API.\nIt might be helpful if you want to know the item's state before or after the save.\n",Object(r.b)("inlineCode",{parentName:"p"},"ReturnValues")," enum contains many options, but ",Object(r.b)("inlineCode",{parentName:"p"},"PutItem")," operation only supports ",Object(r.b)("inlineCode",{parentName:"p"},"None"),", ",Object(r.b)("inlineCode",{parentName:"p"},"AllOld"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"AllNew"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.PutItem()\n    .WithItem(new UserEntity("John", "Doe"))\n    .WithReturnValues(ReturnValues.AllOld)\n    .ToEntityAsync();\n')),Object(r.b)("h2",{id:"updateitem"},"UpdateItem"),Object(r.b)("p",null,"Edits an existing item's attributes or adds a new item to the table if it does not already exist.\nYou can put, delete, or add attribute values."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"UpdateItem")," is a rather complicated operation, so you can only use a fluent API to access it.\nThe primary key and at least one update operation must be specified in every request."),Object(r.b)("p",null,"EfficientDynamoDb provides an easy way to build update expressions.\nAll you need to do is pass ",Object(r.b)("inlineCode",{parentName:"p"},"Expression")," referring to the property you want to update to ",Object(r.b)("inlineCode",{parentName:"p"},".On(...)")," method of fluent API.\nAnd then follow it with the action you want to perform, e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"Assign(...)"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.UpdateItem<UserEntity>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .On(x => x.FirstName).Assign("John")\n    .On(x => x.LastName).Assign("Doe")\n    .ExecuteAsync();\n')),Object(r.b)("p",null,"Please, refer to ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/update-expression"},"UpdateExpression developer guide")," for more details about ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateExpression")," builder usage and tricks."),Object(r.b)("p",null,"You can return the item's attribute values in the same operation by setting ",Object(r.b)("inlineCode",{parentName:"p"},"ReturnValues")," in fluent API.\nIt might be helpful if you want to know the item's state before or after the update."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var oldValues = await ddbContext.UpdateItem<UserEntity>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .On(x => x.FirstName).Assign("John")\n    .WithReturnValues(ReturnValues.UpdatedOld)\n    .ToEntityAsync();\n')),Object(r.b)("h2",{id:"deleteitem"},"DeleteItem"),Object(r.b)("p",null,"Deletes a single item in a table by primary key.\nYou can perform a conditional delete operation that deletes the item if it exists or has an expected attribute value."),Object(r.b)("p",null,"To delete an item, you need to pass the primary key to the ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteItemAsync<T>")," method."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'// If there is only a partition key\nawait ddbContext.DeleteItemAsync<UserEntity>("partitionKey");\n\n// If your primary key consists of partition and sort key\nawait ddbContext.DeleteItemAsync<UserEntity>("partitionKey", "sortKey")\n')),Object(r.b)("p",null,"Unless you specify conditions, the ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteItem")," is an idempotent operation.\nRunning it multiple times on the same item or attribute does not result in an error response."),Object(r.b)("p",null,"You can use fluent API to add more configurations to delete requests.\nIt might be useful when you want to know if your request deleted an item or it wasn't present in the table at all."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'// This call returns null if an item hasn\'t been present in the table\nvar deletedItem = await ddbContext.DeleteItem<MixedEntity>()\n    .WithPrimaryKey("partitionKey")\n    .WithReturnValues(ReturnValues.AllOld)\n    .ToItemAsync();\n')),Object(r.b)("h2",{id:"conditions"},"Conditions"),Object(r.b)("p",null,"Write operations in DynamoDb support conditions.\nEfficientDynamoDb provides the same fluent API for specifying write conditions for all three operations."),Object(r.b)("p",null,"If condition is not met, the operation will throw the ",Object(r.b)("inlineCode",{parentName:"p"},"ConditionalCheckFailedException"),"."),Object(r.b)("p",null,"In the following examples, we'll use this condition:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var condition = Condition<UserEntity>.On(x => x.FirstName).EqualsTo("John");\n')),Object(r.b)("p",null,"PutItem:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.PutItem()\n    .WithItem(new UserEntity("John", "Doe"))\n    .WithCondition(condition)\n    .ExecuteAsync()\n')),Object(r.b)("p",null,"Update:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.UpdateItem<UserEntity>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .On(x => x.FirstName).Assign("John")\n    .WithCondition(condition)\n    .ExecuteAsync();\n')),Object(r.b)("p",null,"DeleteItem:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.DeleteItem<MixedEntity>()\n    .WithPrimaryKey("partitionKey")\n    .WithCondition(condition)\n    .ExecuteAsync();\n')),Object(r.b)("h2",{id:"compatibility-api"},"Compatibility API"),Object(r.b)("p",null,"EfficientDynamoDb provides two extension methods, ",Object(r.b)("inlineCode",{parentName:"p"},"SaveAsync(...)")," and ",Object(r.b)("inlineCode",{parentName:"p"},"DeleteAsync(...)"),", for making it easier to transition from the official AWS .NET SDK."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"It's highly recommended to use native EfficientDynamoDb API for all new features and migrate old code from these compatibility methods as soon as possible.\nTheir usage may lead to redundant RCU and WCU consumption due to suboptimal execution flow.")),Object(r.b)("h3",{id:"saveasync"},"SaveAsync"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"SaveAsync")," looks similar to the native ",Object(r.b)("inlineCode",{parentName:"p"},"PutItem")," calls, but in fact, it executes ",Object(r.b)("inlineCode",{parentName:"p"},"UpdateItem")," operations.\nIt leads to several significant differences:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"It doesn't replace an item entirely, so if you remove a property from your entity class, it won't be deleted from the item in DynamoDB."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"PutItem"),"-like behavior affects only top-level properties. E.g., if you delete or add a property to a nested object, it will be replaced entirely in DynamoDB.")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"SaveAsync")," uses the ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes#DynamoDbVersion"},"DynamoDbVersion")," attribute for enabling optimistic concurrency."),Object(r.b)("p",null,"Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.SaveAsync(new UserEntity("John", "Doe"));\n')),Object(r.b)("h3",{id:"deleteasync"},"DeleteAsync"),Object(r.b)("p",null,"Deletes an item passed as a parameter."),Object(r.b)("p",null,"Similar to ",Object(r.b)("inlineCode",{parentName:"p"},"SaveAsync")," it uses the ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes#DynamoDbVersion"},"DynamoDbVersion")," attribute for enabling optimistic concurrency.\nAn item will be deleted only if its version matches the version of the parameter object."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'await ddbContext.DeleteAsync(new UserEntity("John", "Doe"));\n')),Object(r.b)("h2",{id:"useful-links"},"Useful links"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"API reference",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/put-item"},"PutItem")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/update-item"},"UpdateItem")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/delete-item"},"DeleteItem")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"Condition Builder guide"))))}p.isMDXComponent=!0}}]);