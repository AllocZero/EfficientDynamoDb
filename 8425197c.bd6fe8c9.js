(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),m=i,f=p["".concat(o,".").concat(m)]||p[m]||u[m]||a;return n?r.a.createElement(f,c(c({ref:t},s),{},{components:n})):r.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(3),r=n(7),a=(n(0),n(120)),o={id:"introduction",title:"Introduction",sidebar_label:"Introduction",slug:"/"},c={unversionedId:"efficient_dynamo_db/introduction",id:"efficient_dynamo_db/introduction",isDocsHomePage:!1,title:"Introduction",description:"EfficientDynamoDb is a high-performance DynamoDb library with a significant focus on efficient resources utilization.",source:"@site/docs/efficient_dynamo_db/introduction.md",slug:"/",permalink:"/EfficientDynamoDb/docs/",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/efficient_dynamo_db/introduction.md",version:"current",sidebar_label:"Introduction",sidebar:"someSidebar",next:{title:"Design Principles",permalink:"/EfficientDynamoDb/docs/design"}},l=[{value:"API overview",id:"api-overview",children:[]},{value:"Performance overview",id:"performance-overview",children:[]},{value:"Compatibility with official AWS SDK for .NET",id:"compatibility-with-official-aws-sdk-for-net",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"EfficientDynamoDb")," is a high-performance DynamoDb library with a significant focus on efficient resources utilization.\nDynamoDB delivers single-digit millisecond performance at any scale, so it is paramount to have capable clients to keep up.\nEfficientDynamoDb optimizes the most critical execution paths to make typical operations up to 21x faster while consuming up to 26x less memory.\nDespite being a high-performance library, EfficientDynamoDb still cares about API and provides easy-to-use wrappers even for complicated features like transactions, complex queries, update expressions, and retries."),Object(a.b)("h2",{id:"api-overview"},"API overview"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"EfficientDynamoDb")," has two types of API: high-level and low-level.\nHigh-level API, in most cases, is on-par with low-level in terms of raw processing speed and requires fewer memory allocations.\nIt is recommended to use the high-level API in most cases unless you're sure about what you do."),Object(a.b)("p",null,"Data classes should be marked by ",Object(a.b)("inlineCode",{parentName:"p"},"[DynamoDbTable(string tableName)]")," attributes to make it work with most high-level features.\nMost operations are provided through the ",Object(a.b)("inlineCode",{parentName:"p"},"DynamoDbContext")," object."),Object(a.b)("p",null,"Examples of API usage (",Object(a.b)("inlineCode",{parentName:"p"},"context")," is an object of type ",Object(a.b)("inlineCode",{parentName:"p"},"DynamoDbContext"),"):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"PutItem")," - Save a full item")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-csharp"},'var entity = new UserEntity {Username = "qwerty", Tag = "1234", Age = 15};\nawait _context.PutItemAsync(entity);\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"GetItem")," - Retrieve a single item")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-csharp"},'var user = await _context.GetItemAsync<UserEntity>("qwerty", "1234");\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Query")," - Retrieve a list of items that match key and filter conditions")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-csharp"},'var items = await _context.Query<UserEntity>()\n    .WithKeyExpression(Filter<UserEntity>.On(x => x.Username).EqualsTo("qwerty"))\n    .WithFilterExpression(Filter<UserEntity>.On(x => x.Age).GreaterThanOrEqualsTo(18))\n    .ToListAsync();\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"DeleteItem")," - Delete a single item")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-csharp"},'await _context.DeleteItemAsync<UserEntity>("qwerty", "1234");\n')),Object(a.b)("h2",{id:"performance-overview"},"Performance overview"),Object(a.b)("p",null,"TBD"),Object(a.b)("h2",{id:"compatibility-with-official-aws-sdk-for-net"},"Compatibility with official ",Object(a.b)("a",{parentName:"h2",href:"https://github.com/aws/aws-sdk-net"},"AWS SDK for .NET")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"EfficientDynamoDb")," API is quite similar to the official DynamoDB SDK for .NET, so migration should be relatively easy.\nThe most significant differences are described in the ",Object(a.b)("a",{parentName:"p",href:"./dev-guide/sdk-compatibility"},"compatibility guide"),"."))}b.isMDXComponent=!0}}]);