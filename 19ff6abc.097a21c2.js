(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=u(n),m=r,d=b["".concat(c,".").concat(m)]||b[m]||p[m]||i;return n?a.a.createElement(d,o(o({ref:t},s),{},{components:n})):a.a.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),i=(n(0),n(116)),c={id:"batch",title:"Batch",slug:"../dev-guide/high-level/batch"},o={unversionedId:"dev_guide/high_level/batch",id:"dev_guide/high_level/batch",isDocsHomePage:!1,title:"Batch",description:"DynamoDB provides two main batch operations:",source:"@site/docs/dev_guide/high_level/batch.md",slug:"/dev_guide/dev-guide/high-level/batch",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/dev_guide/high_level/batch.md",version:"current",sidebar:"someSidebar",previous:{title:"Writing Data",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/write"},next:{title:"Transact",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/transact"}},l=[{value:"BatchGetItem",id:"batchgetitem",children:[]},{value:"BatchWriteItem",id:"batchwriteitem",children:[]}],s={toc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"DynamoDB provides two main batch operations:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BatchGetItem")," - Read multiple items from one or more tables."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BatchWriteItem")," -  Put or delete multiple items in one or more tables.")),Object(i.b)("p",null,"EfficientDynamoDb automatically delays and retries in case if batch operation returned unprocessed items,\nwhich can happen when provisioned throughput is exceeded, size limit reached or internal dynamodb error occured."),Object(i.b)("h2",{id:"batchgetitem"},"BatchGetItem"),Object(i.b)("p",null,"Reads up to 100 items in a single request."),Object(i.b)("p",null,"Each entity primary key is configured using ",Object(i.b)("inlineCode",{parentName:"p"},"Batch.GetItem")," factory method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},' var items = await context.BatchGet()\n     .WithItems(\n         Batch.GetItem<EntityClass>().WithPrimaryKey("partitionKey", "sortKey_1"),\n         Batch.GetItem<EntityClass>().WithPrimaryKey("partitionKey", "sortKey_2")\n     )\n     .ToListAsync<EntityClass>();\n')),Object(i.b)("p",null,"When a strong consistency or a projection is needed, a more sophisticated ",Object(i.b)("inlineCode",{parentName:"p"},"FromTables")," method can be used:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},' var items = await context.BatchGet()\n     .FromTables(\n        Batch.FromTable<EntityClass>()\n            .WithConsistentRead(true)\n            .WithProjectedAttributes<ProjectionClass>()\n            .WithItems(\n                Batch.GetItem<EntityClass>().WithPrimaryKey("batch_0", "batch_3"),\n                Batch.GetItem<EntityClass>().WithPrimaryKey("batch_0", "batch_4")\n                )\n    )\n     .ToListAsync<EntityClass>();\n')),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Entities of different type can be retrieved by using ",Object(i.b)("inlineCode",{parentName:"em"},"AsDocuments()")," method the same way as for other read operations.")),Object(i.b)("h2",{id:"batchwriteitem"},"BatchWriteItem"),Object(i.b)("p",null,"Puts or deletes up to 25 items in a single request."),Object(i.b)("p",null,"Each write operation is configured using either ",Object(i.b)("inlineCode",{parentName:"p"},"Batch.PutItem")," or ",Object(i.b)("inlineCode",{parentName:"p"},"Batch.DeleteItem")," factory method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'await context.BatchWrite()\n    .WithItems(\n        Batch.PutItem(new UserEntity("John", "Doe")),\n        Batch.DeleteItem<UserEntity>().WithPrimaryKey("partitionKey", "sortKey")\n    )\n    .ExecuteAsync();\n')))}u.isMDXComponent=!0}}]);