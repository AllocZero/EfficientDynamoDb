(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||r;return n?i.a.createElement(m,l(l({ref:t},s),{},{components:n})):i.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),r=(n(0),n(112)),o={id:"read",title:"Reading Data",slug:"../dev-guide/high-level/read"},l={unversionedId:"dev_guide/high_level/read",id:"dev_guide/high_level/read",isDocsHomePage:!1,title:"Reading Data",description:"DynamoDB provides three main operations for reads:",source:"@site/docs/dev_guide/high_level/read.md",slug:"/dev_guide/dev-guide/high-level/read",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/read",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/dev_guide/high_level/read.md",version:"current",sidebar:"someSidebar",previous:{title:"Attributes",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes"},next:{title:"Writing",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/write"}},c=[{value:"Reading an Item",id:"reading-an-item",children:[]},{value:"Querying the Data",id:"querying-the-data",children:[{value:"Query Pagination",id:"query-pagination",children:[]},{value:"Useful links",id:"useful-links",children:[]}]},{value:"Scanning the Data",id:"scanning-the-data",children:[{value:"Scan Pagination",id:"scan-pagination",children:[]}]}],s={toc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"DynamoDB provides three main operations for reads:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"GetItem")," - Read a single item."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Query")," - Get items from a single partition based on provided query expression."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Scan")," - Get all items from a table with a possibility to filter some of the results out.")),Object(r.b)("p",null,"DynamoDB also supports a ",Object(r.b)("inlineCode",{parentName:"p"},"BatchGetItem")," operation for executing up to 100 ",Object(r.b)("inlineCode",{parentName:"p"},"GetItem")," operations in a single request.\nIt's covered in ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch"},"batch operations guide"),"."),Object(r.b)("h2",{id:"reading-an-item"},"Reading an Item"),Object(r.b)("p",null,"To read an item from a DynamoDB table, use the ",Object(r.b)("inlineCode",{parentName:"p"},"GetItem")," operation.\nYou must provide a type marked by ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes#dynamodbtable"},"DynamoDBTable")," attribute."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey");\n')),Object(r.b)("p",null,"You must specify the ",Object(r.b)("em",{parentName:"p"},"entire")," primary key, not just part of it.\nFor example, if a table has a composite primary key (partition key and sort key), you must supply a value for the partition key and a value for the sort key."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey", "sortKey");\n')),Object(r.b)("p",null,"You can also use the fluent API when you need better control over the operation behavior."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItem<EntityClass>()\n    .WithConsistentRead(true)\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .ToEntityAsync();\n')),Object(r.b)("p",null,"For more info, check the detailed ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/get-item"},"GetItem API reference")),Object(r.b)("h2",{id:"querying-the-data"},"Querying the Data"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Query")," operation in Amazon DynamoDB finds items based on primary key values."),Object(r.b)("p",null,"Since ",Object(r.b)("inlineCode",{parentName:"p"},"Query")," is a rather complicated operation, you can only use fluent API to perform it.\nYou must provide the ",Object(r.b)("inlineCode",{parentName:"p"},"KeyExpression")," in every request."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var query = ddbContext.Query<EntityClass>()\n    .WithKeyExpression(Condition<EntityClass>.On(x => x.Pk).EqualsTo("test"));\n    .BackwardSearch(true)\n    .WithLimit(100)\n    .FromIndex("indexName")\n\nvar items = await query.ToListAsync();\n')),Object(r.b)("p",null,"DynamoDB can only return up to 1 MB of data per response.\nIf your query contains more, DynamoDB will paginate the response.\nIn this case, ",Object(r.b)("inlineCode",{parentName:"p"},"ToListAsync()")," makes multiple calls until all the data is fetched and put into a single resulting array."),Object(r.b)("h3",{id:"query-pagination"},"Query Pagination"),Object(r.b)("p",null,"The easiest way to handle a paginated request manually is to use ",Object(r.b)("inlineCode",{parentName:"p"},"ToAsyncEnumerable()")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"ToListAsync()"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},"await foreach (var item in query.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n")),Object(r.b)("p",null,"There are also cases when you might need to manage pagination tokens yourself.\nTo do so, use the ",Object(r.b)("inlineCode",{parentName:"p"},"ToPageAsync()")," to get the pagination token in response and then pass it to the next request."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},"var page = await query.ToPageAsync();\n\nvar nextPage = await query.WithPaginationToken(page.PaginationToken).ToPageAsync();\n")),Object(r.b)("p",null,"Note: ",Object(r.b)("em",{parentName:"p"},"Due to the internals of the DynamoDB, ",Object(r.b)("inlineCode",{parentName:"em"},"page.Items")," being empty doesn't mean that there are no more data to read."),"\n",Object(r.b)("em",{parentName:"p"},"The only way to know that all data is retrieved is by checking the ",Object(r.b)("inlineCode",{parentName:"em"},"page.PaginationToken")," value. It is ",Object(r.b)("inlineCode",{parentName:"em"},"null")," when there are no more items to pull"),"."),Object(r.b)("h3",{id:"useful-links"},"Useful links"),Object(r.b)("p",null,"For more info, check the detailed ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/query"},"Query API reference")),Object(r.b)("h2",{id:"scanning-the-data"},"Scanning the Data"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Scan")," operation iterates over the whole table and returns values that satisfy ",Object(r.b)("inlineCode",{parentName:"p"},"FilterExpression")," if set.\nFluent API is the only option for high-level scanning."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var scan = ddbContext.Scan<EntityClass>()\n    .WithFilterExpression(Condition<EntityClass>.On(x => x.Pk).EqualsTo("test"));\n    .BackwardSearch(true)\n    .WithLimit(100)\n    .FromIndex("indexName")\n\nvar items = await scan.ToListAsync();\n')),Object(r.b)("p",null,"Much like the ",Object(r.b)("inlineCode",{parentName:"p"},"Query")," response, the ",Object(r.b)("inlineCode",{parentName:"p"},"Scan")," response can only contain up to 1 MB of data.\n",Object(r.b)("inlineCode",{parentName:"p"},"ToListAsync()")," makes multiple calls until all the data is fetched and put into a single resulting array."),Object(r.b)("h3",{id:"scan-pagination"},"Scan Pagination"),Object(r.b)("p",null,"Pagination of ",Object(r.b)("inlineCode",{parentName:"p"},"Scan")," operation works identical to the ",Object(r.b)("inlineCode",{parentName:"p"},"Query"),".\nCheck the ",Object(r.b)("a",{parentName:"p",href:"#query-pagination"},"Query pagination section")," for description and examples."),Object(r.b)("p",null,"Definitive desctiption of ",Object(r.b)("inlineCode",{parentName:"p"},"Scan")," operation is available on ",Object(r.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/scan"},"Scan API reference")," page"))}p.isMDXComponent=!0}}]);