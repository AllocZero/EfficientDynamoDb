"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2042],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={id:"update-item-builder",title:"UpdateItem Request Builder",sidebar_label:"UpdateItem",slug:"../../api-reference/builders/update-item"},l=void 0,o={unversionedId:"api_reference/builders/update-item-builder",id:"api_reference/builders/update-item-builder",title:"UpdateItem Request Builder",description:"Overview",source:"@site/docs/api_reference/builders/update-item-builder.md",sourceDirName:"api_reference/builders",slug:"/api-reference/builders/update-item",permalink:"/EfficientDynamoDb/docs/api-reference/builders/update-item",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/api_reference/builders/update-item-builder.md",tags:[],version:"current",frontMatter:{id:"update-item-builder",title:"UpdateItem Request Builder",sidebar_label:"UpdateItem",slug:"../../api-reference/builders/update-item"},sidebar:"someSidebar",previous:{title:"DeleteItem",permalink:"/EfficientDynamoDb/docs/api-reference/builders/delete-item"},next:{title:"Query",permalink:"/EfficientDynamoDb/docs/api-reference/builders/query"}},p={},u=[{value:"Overview",id:"overview",level:2},{value:"UpdateItem Configuration",id:"updateitem-configuration",level:2},{value:"WithPrimaryKey (with only Partition key)",id:"withprimarykey-pk",level:3},{value:"Parameters",id:"withprimarykey-pk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-example",level:4},{value:"WithPrimaryKey (with both Partition and Sort keys)",id:"withprimarykey-pk-sk",level:3},{value:"Parameters",id:"withprimarykey-pk-sk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-sk-example",level:4},{value:"WithReturnValues",id:"withreturnvalues",level:3},{value:"Parameters",id:"withreturnvalues-parameters",level:4},{value:"Example",id:"withreturnvalues-example",level:4},{value:"WithReturnConsumedCapacity",id:"withreturnconsumedcapacity",level:3},{value:"Parameters",id:"withreturnconsumedcapacity-parameters",level:4},{value:"Example",id:"withreturnconsumedcapacity-example",level:4},{value:"WithReturnValuesOnConditionCheckFailure",id:"withreturnvaluesonconditioncheckfailure",level:3},{value:"Parameters",id:"withreturnvaluesonconditioncheckfailure-parameters",level:4},{value:"Example",id:"withreturnvaluesonconditioncheckfailure-example",level:4},{value:"WithCondition (Explicit condition)",id:"withcondition",level:3},{value:"Parameters",id:"withcondition-parameters",level:4},{value:"Example",id:"withcondition-example",level:4},{value:"WithCondition (Function condition)",id:"withcondition-func",level:3},{value:"Parameters",id:"withcondition-func-parameters",level:4},{value:"Example",id:"withcondition-func-example",level:4},{value:"AsDocument",id:"asdocument",level:3},{value:"Example",id:"asdocument-example",level:4},{value:"On",id:"on",level:3},{value:"Parameters",id:"on-parameters",level:4},{value:"Example",id:"on-example",level:4},{value:"UpdateItem Execution",id:"updateitem-execution",level:2},{value:"ExecuteAsync",id:"execute",level:3},{value:"Parameters",id:"execute-parameters",level:4},{value:"Example",id:"execute-example",level:4},{value:"ToItemAsync",id:"toitem",level:3},{value:"Parameters",id:"toitem-parameters",level:4},{value:"Example",id:"toitem-example",level:4},{value:"ToResponseAsync",id:"toresponse",level:3},{value:"Example",id:"toresponse-example",level:4}],s={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"This section describes the EfficientDynamoDb API for building the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateItem")," request."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateEntityRequestBuilder<TEntity>")," interface provides a builder pattern for constructing a ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateItem")," operation in DynamoDB."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamoDbContext.UpdateItem()")," method to get the builder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var builder = ddbContext.UpdateItem();\n")),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateItem")," request you only required to specify primary key using the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithPrimaryKey")," method.\nAll other builder methods are optional and can be omitted.\nIn this case, DynamoDB will use the default behavior."),(0,i.kt)("h2",{id:"updateitem-configuration"},"UpdateItem Configuration"),(0,i.kt)("h3",{id:"withprimarykey-pk"},"WithPrimaryKey (with only Partition key)"),(0,i.kt)("p",null,"Specifies the partition key of the item to update."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IUpdateEntityRequestBuilder<TEntity> WithPrimaryKey<TPk>(TPk pk);\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"It is required to specify the primary key for every UpdateItem request.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Use this method if the table has only a partition key. If the table has both partition and sort keys, use ",(0,i.kt)("a",{parentName:"p",href:"#withprimarykey-pk-sk"},(0,i.kt)("inlineCode",{parentName:"a"},"WithPrimaryKey<TPk, TSk>"))," instead.")),(0,i.kt)("h4",{id:"withprimarykey-pk-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pk"),": The partition key of the item.")),(0,i.kt)("h4",{id:"withprimarykey-pk-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithPrimaryKey("partitionKey");\n')),(0,i.kt)("h3",{id:"withprimarykey-pk-sk"},"WithPrimaryKey (with both Partition and Sort keys)"),(0,i.kt)("p",null,"Specifies the partition and sort keys of the item to update."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IDeleteItemEntityRequestBuilder<TEntity> WithPrimaryKey<TPk, TSk>(TPk pk, TSk sk);\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"It is required to specify the primary key for every UpdateItem request.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Use this method only if the table has both partition and sort keys.\nIf the table only has a partition key, use ",(0,i.kt)("a",{parentName:"p",href:"#withprimarykey-pk"},(0,i.kt)("inlineCode",{parentName:"a"},"WithPrimaryKey<TPk>"))," instead.")),(0,i.kt)("h4",{id:"withprimarykey-pk-sk-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pk"),": The partition key of the item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sk"),": The sort key of the item.")),(0,i.kt)("h4",{id:"withprimarykey-pk-sk-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithPrimaryKey("partitionKey", "sortKey");\n')),(0,i.kt)("h3",{id:"withreturnvalues"},"WithReturnValues"),(0,i.kt)("p",null,"Specifies the attributes to include in the response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"UpdateEntityRequestBuilder<TEntity> WithReturnValues(ReturnValues returnValues);\n")),(0,i.kt)("p",null,"If not specified, no values are returned in the response."),(0,i.kt)("h4",{id:"withreturnvalues-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"returnValues"),": ",(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/options/return-values"},"ReturnValues")," enum option.\nAll values of ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnValues")," enum are valid for UpdateItem operation.\nPassing ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnValues.None")," is equivalent to not using the ",(0,i.kt)("inlineCode",{parentName:"li"},"WithReturnValues")," method at all.")),(0,i.kt)("h4",{id:"withreturnvalues-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithReturnValues(ReturnValues.UpdatedOld);\n")),(0,i.kt)("h3",{id:"withreturnconsumedcapacity"},"WithReturnConsumedCapacity"),(0,i.kt)("p",null,"Specifies the consumed capacity details to include in the response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"UpdateEntityRequestBuilder<TEntity> WithReturnConsumedCapacity(ReturnConsumedCapacity returnConsumedCapacity);\n")),(0,i.kt)("p",null,"If not specified, no consumed capacity info is returned in the response."),(0,i.kt)("h4",{id:"withreturnconsumedcapacity-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"returnConsumedCapacity"),": The type of consumed capacity information to return.\nSetting it to ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity.None")," is equivalent to not using the ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity()")," method at all.")),(0,i.kt)("h4",{id:"withreturnconsumedcapacity-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithReturnConsumedCapacity(ReturnConsumedCapacity.Total);\n")),(0,i.kt)("h3",{id:"withreturnvaluesonconditioncheckfailure"},"WithReturnValuesOnConditionCheckFailure"),(0,i.kt)("p",null,"Specifies how to handle return values if the operation fails."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"UpdateEntityRequestBuilder<TEntity> WithReturnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure option);\n")),(0,i.kt)("p",null,"If not specified, no values are returned in case of condition check failure."),(0,i.kt)("h4",{id:"withreturnvaluesonconditioncheckfailure-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"option"),": Option for handling return values on condition check failure.")),(0,i.kt)("h4",{id:"withreturnvaluesonconditioncheckfailure-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithReturnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure.AllOld);\n")),(0,i.kt)("h3",{id:"withcondition"},"WithCondition (Explicit condition)"),(0,i.kt)("p",null,"Specifies condition for the UpdateItem operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"UpdateEntityRequestBuilder<TEntity> WithCondition(FilterBase condition);\n")),(0,i.kt)("h4",{id:"withcondition-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"condition"),": The condition that is used to determine whether the UpdateItem operation should succeed or fail.\nRefer to our ",(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions"},"condition expression building guide")," to learn how to build a condition in EfficientDynamoDb.")),(0,i.kt)("h4",{id:"withcondition-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var expr = Condition<EntityClass>.On(item => item.Pk).Exists();\nbuilder = builder.WithCondition(expr);\n")),(0,i.kt)("h3",{id:"withcondition-func"},"WithCondition (Function condition)"),(0,i.kt)("p",null,"Specifies the condition function for the UpdateItem operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IUpdateEntityRequestBuilder<TEntity> WithCondition(Func<EntityFilter<TEntity>, FilterBase> filterSetup);\n")),(0,i.kt)("h4",{id:"withcondition-func-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filterSetup"),": The condition function that is used to determine whether the UpdateItem operation should succeed or fail.\nRefer to our ",(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions"},"condition expression building guide")," to learn how to build a condition in EfficientDynamoDb.")),(0,i.kt)("h4",{id:"withcondition-func-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithCondition(\n    cond => cond.On(item => item.FirstName).EqualTo("John")\n);\n')),(0,i.kt)("h3",{id:"asdocument"},"AsDocument"),(0,i.kt)("p",null,"Represents the returned item as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Document"),"."),(0,i.kt)("p",null,"This method changes the type of the builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IUpdateItemDocumentRequestBuilder<TEntity> AsDocument();\n")),(0,i.kt)("h4",{id:"asdocument-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var documentBuilder = builder.AsDocument();\n")),(0,i.kt)("p",null,"After execution, this ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateItem")," request will return the ",(0,i.kt)("inlineCode",{parentName:"p"},"Document")," instead of the original entity of the builder."),(0,i.kt)("h3",{id:"on"},"On"),(0,i.kt)("p",null,"Specifies the attribute to be updated in the DynamoDB item."),(0,i.kt)("p",null,"To update multiple attributes, call this method multiple times.\nFor a detailed walkthrough and examples, refer to the ",(0,i.kt)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev-guide/high-level/update-expression"},"update expression developer guide"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IAttributeUpdate<IUpdateEntityRequestBuilder<TEntity>, TEntity, TProperty> On<TProperty>(Expression<Func<TEntity, TProperty>> expression);\n")),(0,i.kt)("h4",{id:"on-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expression"),": An expression identifying the attribute to be updated.")),(0,i.kt)("h4",{id:"on-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.On(item => item.FirstName).Assign("John")\n                 .On(item => item.UpdatesCount).Increment(1);\n')),(0,i.kt)("h2",{id:"updateitem-execution"},"UpdateItem Execution"),(0,i.kt)("p",null,"There are 2 versions of every query execution method: regular and document.\nAll versions have same parameters, the only difference is entity type returned value:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In most cases, the original entity ",(0,i.kt)("inlineCode",{parentName:"li"},"TEntity")," is returned."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"AsDocuments()")," was used, the execution method will contain the entity type of ",(0,i.kt)("inlineCode",{parentName:"li"},"Document"),".")),(0,i.kt)("p",null,"For simplicity, this document covers only regular version of execution methods."),(0,i.kt)("h3",{id:"execute"},"ExecuteAsync"),(0,i.kt)("p",null,"Executes the UpdateItem operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Task ExecuteAsync(CancellationToken cancellationToken = default);\n")),(0,i.kt)("h4",{id:"execute-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cancellationToken"),": Token that can be used to cancel the task.")),(0,i.kt)("h4",{id:"execute-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"await builder.ExecuteAsync();\n")),(0,i.kt)("h3",{id:"toitem"},"ToItemAsync"),(0,i.kt)("p",null,"Executes the UpdateItem operation and returns the item before the update."),(0,i.kt)("p",null,"The item is returned as it appeared before the UpdateItem operation, but only if ",(0,i.kt)("a",{parentName:"p",href:"#withreturnvalues"},(0,i.kt)("inlineCode",{parentName:"a"},"WithReturnValues"))," was specified in the request chain.\nOtherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," is returned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<TEntity?> ToItemAsync(CancellationToken cancellationToken = default);\n")),(0,i.kt)("h4",{id:"toitem-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cancellationToken"),": Token that can be used to cancel the task.")),(0,i.kt)("h4",{id:"toitem-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var item = await builder.ToItemAsync();\n")),(0,i.kt)("h3",{id:"toresponse"},"ToResponseAsync"),(0,i.kt)("p",null,"Executes the UpdateItem operation and returns the deserialized response.\nBesides the item, this response contains ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsumedCapacity")," property if ",(0,i.kt)("a",{parentName:"p",href:"#withreturnconsumedcapacity"},(0,i.kt)("inlineCode",{parentName:"a"},"WithReturnConsumedCapacity"))," was used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<UpdateItemEntityResponse<TEntity>> ToResponseAsync(CancellationToken cancellationToken = default);\n")),(0,i.kt)("h4",{id:"toresponse-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var response = await builder.ToResponseAsync();\nvar item = response.Item;\nvar consumedCapacity = response.ConsumedCapacity;\n")))}m.isMDXComponent=!0}}]);