"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,h=m["".concat(p,".").concat(c)]||m[c]||d[c]||a;return n?i.createElement(h,l(l({ref:t},u),{},{components:n})):i.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const a={id:"get-item-builder",title:"GetItem Request Builder",sidebar_label:"GetItem",slug:"../../api-reference/builders/get-item"},l=void 0,o={unversionedId:"api_reference/builders/get-item-builder",id:"api_reference/builders/get-item-builder",title:"GetItem Request Builder",description:"Overview",source:"@site/docs/api_reference/builders/get-item-builder.md",sourceDirName:"api_reference/builders",slug:"/api-reference/builders/get-item",permalink:"/EfficientDynamoDb/docs/api-reference/builders/get-item",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/api_reference/builders/get-item-builder.md",tags:[],version:"current",frontMatter:{id:"get-item-builder",title:"GetItem Request Builder",sidebar_label:"GetItem",slug:"../../api-reference/builders/get-item"},sidebar:"someSidebar",previous:{title:"Request Builders",permalink:"/EfficientDynamoDb/docs/api-reference/builders"},next:{title:"PutItem",permalink:"/EfficientDynamoDb/docs/api-reference/builders/put-item"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"GetItem Configuration",id:"getitem-configuration",level:2},{value:"WithPrimaryKey (with only Partition key)",id:"withprimarykey-pk",level:3},{value:"Parameters",id:"withprimarykey-pk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-example",level:4},{value:"WithPrimaryKey (with both Partition and Sort keys)",id:"withprimarykey-pk-sk",level:3},{value:"Parameters",id:"withprimarykey-pk-sk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-sk-example",level:4},{value:"WithConsistentRead",id:"withconsistentread",level:3},{value:"Parameters",id:"withconsistentread-parameters",level:4},{value:"Example",id:"withconsistentread-example",level:4},{value:"ReturnConsumedCapacity",id:"returnconsumedcapacity",level:3},{value:"Parameters",id:"returnconsumedcapacity-parameters",level:4},{value:"Example",id:"returnconsumedcapacity-example",level:4},{value:"AsProjection (With Type)",id:"asprojection-type",level:3},{value:"Example",id:"asprojection-type-example",level:4},{value:"AsProjection (With Attributes)",id:"asprojection-type-attributes",level:3},{value:"Parameters",id:"asprojection-type-attributes-parameters",level:4},{value:"Example",id:"asprojection-type-attributes-example",level:4},{value:"WithProjectedAttributes",id:"withprojectedattributes",level:3},{value:"Parameters",id:"withprojectedattributes-parameters",level:4},{value:"Example",id:"withprojectedattributes-example",level:4},{value:"AsDocument",id:"asdocument",level:3},{value:"Example",id:"asdocument-example",level:4},{value:"GetItem Execution",id:"getitem-execution",level:2},{value:"ToItemAsync",id:"toitem",level:3},{value:"Parameters",id:"toitem-parameters",level:4},{value:"Example",id:"toitem-example",level:4},{value:"ToResponseAsync",id:"toresponse",level:3},{value:"Example",id:"toresponse-example",level:4}],u={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This section describes the EfficientDynamoDb API for building the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," request."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IGetItemEntityRequestBuilder<TEntity>")," interface provides a builder pattern for constructing a ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," operation in DynamoDB.\nIt is designed to work with a database entity of type ",(0,r.kt)("inlineCode",{parentName:"p"},"TEntity"),"."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"DynamoDbContext.GetItem<TEntity>()")," method to get the builder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var builder = ddbContext.GetItem<EntityClass>();\n")),(0,r.kt)("p",null,"For the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," request you only required to specify primary key using the ",(0,r.kt)("inlineCode",{parentName:"p"},"WithPrimaryKey")," method.\nAll other builder methods are optional and can be omitted.\nIn this case, DynamoDB will use the default behavior."),(0,r.kt)("h2",{id:"getitem-configuration"},"GetItem Configuration"),(0,r.kt)("h3",{id:"withprimarykey-pk"},"WithPrimaryKey (with only Partition key)"),(0,r.kt)("p",null,"Specifies the partition key of the item to get."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity> WithPrimaryKey<TPk>(TPk pk);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It is required to specify the primary key for every GetItem request.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use this method if the table has only a partition key. If the table has both partition and sort keys, use ",(0,r.kt)("a",{parentName:"p",href:"#withprimarykey-pk-sk"},(0,r.kt)("inlineCode",{parentName:"a"},"WithPrimaryKey<TPk, TSk>"))," instead.")),(0,r.kt)("h4",{id:"withprimarykey-pk-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pk"),": The partition key of the item.")),(0,r.kt)("h4",{id:"withprimarykey-pk-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithPrimaryKey("partitionKey");\n')),(0,r.kt)("h3",{id:"withprimarykey-pk-sk"},"WithPrimaryKey (with both Partition and Sort keys)"),(0,r.kt)("p",null,"Specifies the partition and sort keys of the item to get."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity> WithPrimaryKey<TPk, TSk>(TPk pk, TSk sk);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It is required to specify the primary key for every GetItem request.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use this method only if the table has both partition and sort keys.\nIf the table only has a partition key, use ",(0,r.kt)("a",{parentName:"p",href:"#withprimarykey-pk"},(0,r.kt)("inlineCode",{parentName:"a"},"WithPrimaryKey<TPk>"))," instead.")),(0,r.kt)("h4",{id:"withprimarykey-pk-sk-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pk"),": The partition key of the item."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sk"),": The sort key of the item.")),(0,r.kt)("h4",{id:"withprimarykey-pk-sk-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithPrimaryKey("partitionKey", "sortKey");\n')),(0,r.kt)("h3",{id:"withconsistentread"},"WithConsistentRead"),(0,r.kt)("p",null,"Specifies whether to use a consistent read in the GetItem operation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity> WithConsistentRead(bool useConsistentRead);\n")),(0,r.kt)("p",null,"If not specified, DynamoDB will use eventually consistent read."),(0,r.kt)("h4",{id:"withconsistentread-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useConsistentRead"),": Set this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if you want a consistent read.\nOtherwise, set it to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".\nSetting it to ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," is equivalent to not using the ",(0,r.kt)("inlineCode",{parentName:"li"},"WithConsistentRead()")," method at all.")),(0,r.kt)("h4",{id:"withconsistentread-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithConsistentRead(true);\n")),(0,r.kt)("h3",{id:"returnconsumedcapacity"},"ReturnConsumedCapacity"),(0,r.kt)("p",null,"Specifies the consumed capacity details to include in the response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity> ReturnConsumedCapacity(ReturnConsumedCapacity consumedCapacityMode);\n")),(0,r.kt)("p",null,"If not specified, no consumed capacity info is returned in the response."),(0,r.kt)("h4",{id:"returnconsumedcapacity-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consumedCapacityMode"),": The type of consumed capacity information to return.\nSetting it to ",(0,r.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity.None")," is equivalent to not using the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity()")," method at all.")),(0,r.kt)("h4",{id:"returnconsumedcapacity-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.ReturnConsumedCapacity(ReturnConsumedCapacity.Total);\n")),(0,r.kt)("h3",{id:"asprojection-type"},"AsProjection (With Type)"),(0,r.kt)("p",null,"Projects the retrieved item to the specified type.\nOnly properties present in ",(0,r.kt)("inlineCode",{parentName:"p"},"TProjection")," will be retrieved."),(0,r.kt)("p",null,"This method returns a different type of the builder to preserve the projection type.\nIn case of chained calls and/or using ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," to save builder to a variable, the change of returned type may be unnoticeable.\nThis is by design and you should be able to mix regular and projected builders."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity, TProjection> AsProjection<TProjection>() where TProjection : class;\n")),(0,r.kt)("h4",{id:"asprojection-type-example"},"Example"),(0,r.kt)("p",null,"Since the change of returned builder type, it can't be assigned to the same variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var projectedBuilder = builder.AsProjection<ProjectedEntity>();\n")),(0,r.kt)("h3",{id:"asprojection-type-attributes"},"AsProjection (With Attributes)"),(0,r.kt)("p",null,"Projects the retrieved item to the specified type, but only retrieves the properties specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," parameter.\nOther properties will have default values."),(0,r.kt)("p",null,"Similarly to ",(0,r.kt)("a",{parentName:"p",href:"#asprojection-type"},(0,r.kt)("inlineCode",{parentName:"a"},"AsProjection<TProjection>()")),", this method returns a different type of the builder to preserve the projection type with all the previously explained consequences."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity, TProjection> AsProjection<TProjection>(params Expression<Func<TProjection, object>>[] properties) where TProjection : class;\n")),(0,r.kt)("h4",{id:"asprojection-type-attributes-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"properties"),": The attributes to project.")),(0,r.kt)("h4",{id:"asprojection-type-attributes-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var projectedBuilder = builder.AsProjection<ProjectedEntity>(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n")),(0,r.kt)("p",null,"After execution, this ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," request will return instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ProjectedEntity")," with only ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeProperty")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AnotherProperty")," set.\nAll other properties will have default values."),(0,r.kt)("h3",{id:"withprojectedattributes"},"WithProjectedAttributes"),(0,r.kt)("p",null,"Specifies the attributes to project in the retrieved item.\nOnly properties specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," will be retrieved. Other properties will have default values."),(0,r.kt)("p",null,"Contrary to ",(0,r.kt)("inlineCode",{parentName:"p"},"AsProjection")," methods, ",(0,r.kt)("inlineCode",{parentName:"p"},"WithProjectedAttributes")," doesn't change the type of returned entity and builder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemEntityRequestBuilder<TEntity> WithProjectedAttributes(params Expression<Func<TEntity, object>>[] properties);\n")),(0,r.kt)("h4",{id:"withprojectedattributes-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"properties"),": The attributes to project.")),(0,r.kt)("h4",{id:"withprojectedattributes-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithProjectedAttributes(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n")),(0,r.kt)("p",null,"After execution, this ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," request will return the original entity of the builder (in this example it's ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityClass"),") with only ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeProperty")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AnotherProperty")," set.\nAll other properties will have default values."),(0,r.kt)("h3",{id:"asdocument"},"AsDocument"),(0,r.kt)("p",null,"Represents the returned item as a ",(0,r.kt)("inlineCode",{parentName:"p"},"Document"),"."),(0,r.kt)("p",null,"Similarly to ",(0,r.kt)("a",{parentName:"p",href:"#asprojection-type"},(0,r.kt)("inlineCode",{parentName:"a"},"AsProjection<TProjection>()")),", this operation returns different type of builder with all the previously explained consequences."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"IGetItemDocumentRequestBuilder<TEntity> AsDocument();\n")),(0,r.kt)("h4",{id:"asdocument-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var documentBuilder = builder.AsDocument();\n")),(0,r.kt)("p",null,"After execution, this ",(0,r.kt)("inlineCode",{parentName:"p"},"GetItem")," request will return the ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," instead of the original entity of the builder."),(0,r.kt)("h2",{id:"getitem-execution"},"GetItem Execution"),(0,r.kt)("p",null,"There are 3 versions of every GetItem execution method: regular, projected, and document.\nAll versions have same parameters, the only difference is entity type returned value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In most cases, the original entity ",(0,r.kt)("inlineCode",{parentName:"li"},"TEntity")," is returned."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"AsProjection<TProjection>()")," was used during the configuration, the execution method will contain the entity type of ",(0,r.kt)("inlineCode",{parentName:"li"},"TProjection"),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"AsDocument()")," was used, the execution method will contain the entity type of ",(0,r.kt)("inlineCode",{parentName:"li"},"Document"),".")),(0,r.kt)("p",null,"In all cases, the result will be ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the item does not exist."),(0,r.kt)("p",null,"For simplicity, this document covers only regular version of execution methods."),(0,r.kt)("h3",{id:"toitem"},"ToItemAsync"),(0,r.kt)("p",null,"Executes the GetItem operation asynchronously and returns the item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<TEntity?> ToItemAsync(CancellationToken cancellationToken = default);\n")),(0,r.kt)("h4",{id:"toitem-parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cancellationToken"),": Token that can be used to cancel the task.")),(0,r.kt)("h4",{id:"toitem-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var item = await builder.ToItemAsync();\n")),(0,r.kt)("h3",{id:"toresponse"},"ToResponseAsync"),(0,r.kt)("p",null,"Executes the GetItem operation asynchronously and returns the deserialized response.\nBesides the item, this response contains ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsumedCapacity")," property if ",(0,r.kt)("a",{parentName:"p",href:"#returnconsumedcapacity"},(0,r.kt)("inlineCode",{parentName:"a"},"ReturnConsumedCapacity"))," was used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<GetItemEntityResponse<TEntity>> ToResponseAsync(CancellationToken cancellationToken = default);\n")),(0,r.kt)("h4",{id:"toresponse-example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"var response = await builder.ToResponseAsync();\nvar item = response.Item;\nvar consumedCapacity = response.ConsumedCapacity;\n")))}d.isMDXComponent=!0}}]);