"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7194],{4056:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"dev_guide/high_level/conditions","title":"Building Conditions","description":"This guide focuses on EfficientDynamoDb\'s API for building conditions.","source":"@site/docs/dev_guide/high_level/conditions.md","sourceDirName":"dev_guide/high_level","slug":"/dev-guide/high-level/conditions","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/conditions","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/conditions.md","tags":[],"version":"current","frontMatter":{"id":"conditions","title":"Building Conditions","slug":"../../dev-guide/high-level/conditions"},"sidebar":"someSidebar","previous":{"title":"Converters","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/converters"},"next":{"title":"Building Update Expressions","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/update-expression"}}');var o=i(3420),s=i(5404);const r={id:"conditions",title:"Building Conditions",slug:"../../dev-guide/high-level/conditions"},a=void 0,l={},d=[{value:"Overview",id:"overview",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Conditions on array elements",id:"conditions-on-array-elements",level:3},{value:"Nested attributes",id:"nested-attributes",level:3},{value:"Comparison with other attributes",id:"comparison-with-other-attributes",level:3},{value:"Multiple conditions on a single entity",id:"multiple-conditions-on-a-single-entity",level:3},{value:"Joining multiple conditions",id:"joining-multiple-conditions",level:2},{value:"Joiner API",id:"joiner-api",level:3},{value:"Logical operators API",id:"logical-operators-api",level:3},{value:"Using both APIs together",id:"using-both-apis-together",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This guide focuses on EfficientDynamoDb's API for building conditions.\nIt's assumed that you are already familiar with condition expressions in DynamoDB.\nIf not, please check out ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html",children:"official AWS docs"})," and ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html",children:"comparison operators reference"})," for a better understanding of topics covered in this section."]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"EfficientDynamoDb aims to simplify condition expression building by providing an abstraction over DynamoDB expressions syntax."}),"\n",(0,o.jsx)(n.p,{children:"Benefits of our API:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Removes the requirement of managing ",(0,o.jsx)(n.code,{children:"ExpressionAttributeNames"}),", ",(0,o.jsx)(n.code,{children:"ExpressionAttributeValues"}),", and handling reserved words."]}),"\n",(0,o.jsx)(n.li,{children:"Easy refactoring and usage search in your favorite IDE."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,o.jsxs)(n.p,{children:["The simplest way of creating a condition is using the ",(0,o.jsx)(n.code,{children:"Condition<T>.On(...)"})," static factory method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var condition = Condition<EntityClass>.On(x => x.YourProperty).EqualTo(10);\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"On(...)"})," accepts an expression that should point to a property marked by ",(0,o.jsx)(n.code,{children:"DynamoDbProperty"})," attribute, element inside the collection, or the nested property of another object."]}),"\n",(0,o.jsx)(n.h3,{id:"conditions-on-array-elements",children:"Conditions on array elements"}),"\n",(0,o.jsx)(n.p,{children:"Condition for the specific element inside the collection:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var condition = Condition<EntityClass>.On(x => x.YourList[3]).EqualTo(10);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Currently, you can only use number literals, constants, fields, or variables inside the indexer.\nYou can't use methods or properties to get the index."}),"\n",(0,o.jsx)(n.p,{children:"If you need to get an index from the method, you can save it to a local variable first:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"// Correct\nvar index = GetIndex();\nvar condition = Condition<EntityClass>.On(x => x.YourList[index]).EqualTo(10);\n\n// Incorrect\nvar condition = Condition<EntityClass>.On(x => x.YourList[GetIndex()]).EqualTo(10);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nested-attributes",children:"Nested attributes"}),"\n",(0,o.jsx)(n.p,{children:"You may access the nested attributes of lists and objects.\nE.g., the following condition is valid:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var condition = Condition<EntityClass>.On(x => x.TopLvlProperty.NestedList[3].MoreNestedProperty).EqualTo(10);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"comparison-with-other-attributes",children:"Comparison with other attributes"}),"\n",(0,o.jsxs)(n.p,{children:["The majority of DynamoDB condition operations support comparison with other attributes instead of an explicit value.\nYou can pass an expression inside the operation method in the same way you do in ",(0,o.jsx)(n.code,{children:"On(...)"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var condition = Condition<EntityClass>.On(x => x.SomeProperty).EqualTo(x => x.AnotherProperty);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Some operations like ",(0,o.jsx)(n.code,{children:"Between"})," can even accept a combination of explicit values and attributes:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var condition = Condition<EntityClass>.On(x => x.SomeProperty).EqualTo(minValueVariable, x => x.MaxValueProperty);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-conditions-on-a-single-entity",children:"Multiple conditions on a single entity"}),"\n",(0,o.jsx)(n.p,{children:"Often, you need to create multiple conditions on a single entity.\nIn this case, the alternative API may be handy:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var filter = Condition.ForEntity<EntityClass>();\n\nvar firstCondition = filter.On(x => x.SomeProperty).EqualTo(10);\nvar secondCondition = filter.On(x => x.RareProperty).Exists();\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can use these conditions in separate requests or join them into a single condition which is explained in the following section."}),"\n",(0,o.jsx)(n.h2,{id:"joining-multiple-conditions",children:"Joining multiple conditions"}),"\n",(0,o.jsx)(n.p,{children:"There are two ways of combining multiple conditions into one expression."}),"\n",(0,o.jsx)(n.h3,{id:"joiner-api",children:"Joiner API"}),"\n",(0,o.jsxs)(n.p,{children:["Use any combination of ",(0,o.jsx)(n.code,{children:"Joiner.And(...)"})," and ",(0,o.jsx)(n.code,{children:"Joiner.Or(...)"})," methods to create a complex condition."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, the DynamoDB condition ",(0,o.jsx)(n.code,{children:"#firstName = :firstName AND (#age < :lowerAgeLimit OR #age > :upperAgeLimit) AND begins_with(#lastName, :lastNamePrefix)"})," would look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var filter = Condition.ForEntity<EntityClass>();\nvar condition = Joiner.And(\n        filter.On(x => x.FirstName).EqualTo(firstNameValue),\n        Joiner.Or(\n            filter.On(x => x.Age).LessThan(lowerAgeLimit),\n            filter.On(x => x.Age).GreaterThan(upperAgeLimit)\n        ),\n        filter.On(x => x.LastName).BeginsWith(lastNamePrefix)\n    );\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logical-operators-api",children:"Logical operators API"}),"\n",(0,o.jsxs)(n.p,{children:["You might find the Joiner API quite verbose and difficult to read when there are many ",(0,o.jsx)(n.code,{children:"AND"}),"/",(0,o.jsx)(n.code,{children:"OR"})," operators.\nThat's where logical operators come to the rescue.\nConditions in EfficientDynamoDb support logical ",(0,o.jsx)(n.code,{children:"&"})," and ",(0,o.jsx)(n.code,{children:"|"})," for combining multiple into one."]}),"\n",(0,o.jsx)(n.p,{children:"The same DDB expression from the Joiner API example looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var filter = Condition.ForEntity<EntityClass>();\nvar condition = filter.On(x => x.FirstName).EqualTo(firstNameValue) \n    & (filter.On(x => x.Age).LessThan(lowerAgeLimit) | filter.On(x => x.Age).GreaterThan(upperAgeLimit)) \n    & filter.On(x => x.LastName).BeginsWith(lastNamePrefix)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note that this API follows all logical operator rules, e.g., you can use parentheses to change execution order."}),"\n",(0,o.jsx)(n.h3,{id:"using-both-apis-together",children:"Using both APIs together"}),"\n",(0,o.jsx)(n.p,{children:"It's possible to use both Joiner and Logical operators API together to build a single query."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var filter = Condition.ForEntity<EntityClass>();\nvar condition = Joiner.And(\n        filter.On(x => x.FirstName).EqualTo(firstNameValue),\n        filter.On(x => x.Age).LessThan(lowerAgeLimit) | filter.On(x => x.Age).GreaterThan(upperAgeLimit),\n        filter.On(x => x.LastName).BeginsWith(lastNamePrefix)\n    );\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},5404:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6672);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);