"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={slug:"whats-new-0.9.15",title:"What's New in EfficientDynamoDb 0.9.15",author:"Mykhailo Matviiv",author_url:"https://github.com/firenero",author_image_url:"https://avatars.githubusercontent.com/u/9461703?s=400&u=a677c383395a1debb6ae6fe1a50d6b039b28f203&v=4",tags:["release","dynamodb","dotnet","c#","aws"]},o=void 0,l={permalink:"/EfficientDynamoDb/blog/whats-new-0.9.15",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/blog/blog/2024-02-04-whats-new-v0.9.15.md",source:"@site/blog/2024-02-04-whats-new-v0.9.15.md",title:"What's New in EfficientDynamoDb 0.9.15",description:"It has been a long time since the latest stable release of EfficientDynamoDb, but I'm glad to announce that v0.9.15 is finally here.",date:"2024-02-04T00:00:00.000Z",formattedDate:"February 4, 2024",tags:[{label:"release",permalink:"/EfficientDynamoDb/blog/tags/release"},{label:"dynamodb",permalink:"/EfficientDynamoDb/blog/tags/dynamodb"},{label:"dotnet",permalink:"/EfficientDynamoDb/blog/tags/dotnet"},{label:"c#",permalink:"/EfficientDynamoDb/blog/tags/c"},{label:"aws",permalink:"/EfficientDynamoDb/blog/tags/aws"}],readingTime:2.94,hasTruncateMarker:!1,authors:[{name:"Mykhailo Matviiv",url:"https://github.com/firenero",imageURL:"https://avatars.githubusercontent.com/u/9461703?s=400&u=a677c383395a1debb6ae6fe1a50d6b039b28f203&v=4"}],frontMatter:{slug:"whats-new-0.9.15",title:"What's New in EfficientDynamoDb 0.9.15",author:"Mykhailo Matviiv",author_url:"https://github.com/firenero",author_image_url:"https://avatars.githubusercontent.com/u/9461703?s=400&u=a677c383395a1debb6ae6fe1a50d6b039b28f203&v=4",tags:["release","dynamodb","dotnet","c#","aws"]},nextItem:{title:"Welcome",permalink:"/EfficientDynamoDb/blog/welcome"}},s={authorsImageUrls:[void 0]},u=[{value:"Support for <code>ReturnValuesOnConditionCheckFailure</code> feature",id:"support-for-returnvaluesonconditioncheckfailure-feature",level:2},{value:"More predefined region endpoints",id:"more-predefined-region-endpoints",level:2},{value:"Other improvements",id:"other-improvements",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It has been a long time since the latest stable release of EfficientDynamoDb, but I'm glad to announce that ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AllocZero/EfficientDynamoDb/releases/tag/effddb-v0.9.15"},"v0.9.15")," is finally here."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This release brings support for the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReturnValuesOnConditionCheckFailure")," parameter in write requests, more predefined region endpoints, improved performance of error parsing, and XML docs for UpdateExpression builder.")),(0,i.kt)("h2",{id:"support-for-returnvaluesonconditioncheckfailure-feature"},"Support for ",(0,i.kt)("inlineCode",{parentName:"h2"},"ReturnValuesOnConditionCheckFailure")," feature"),(0,i.kt)("p",null,"This parameter allows you to receive an item as it existed during the failed write attempt.\nIt aids in reducing RCU usage and latency for initiating an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"GetItem")," request to understand why exactly your condition check failed."),(0,i.kt)("p",null,"Let's consider the following example.\nYou are developing a warehouse management system or internet store that allows employees to adjust item quantity.\nA simplified data model for an item might look similar to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbTable("items")]\npublic class Item \n{\n    [DynamoDbProperty("pk", DynamoDbAttributeType.PartitionKey)]\n    public string WarehouseId { get; set; }\n\n    [DynamoDbProperty("sk", DynamoDbAttributeType.SortKey)]\n    public string ItemId { get; set; }\n\n    [DynamoDbProperty("quantity")]\n    public int Quantity { get; set; }\n}\n')),(0,i.kt)("p",null,"Now, imagine a situation where two employees are trying to sell the same item to customers at the same time.\nIn this case, you need to ensure that there are enough items in the warehouse before you finalize the deal.\nAnd if there are not enough items for sale, inform the employee about how many items are currently available."),(0,i.kt)("p",null,"Before ",(0,i.kt)("inlineCode",{parentName:"p"},"ReturnValuesOnConditionCheckFailure"),", the method that performs this function might look similar to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task SellItemsAsync(string warehouseId, string itemId, int quantity)\n{\n    try \n    {\n        await _context.UpdateItem<Item>()\n            .WithPrimaryKey(warehouseId, itemId)\n            .WithCondition(cond => cond.On(x => x.Balance).GreaterThanOrEqualTo(10))\n            .ExecuteAsync();\n    }\n    catch (ConditionalCheckFailedException e)\n    {\n        // Not enough items available but no way to tell how many are left.\n        // So we need to perform an additional GetItem request.\n        var item = await _context.GetItemAsync<Item>(warehouseId, itemId);\n        throw new InsufficientInventoryException(item.Balance);\n    }\n}\n")),(0,i.kt)("p",null,"There are two main issues with this approach:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Additional RSU is used for the ",(0,i.kt)("inlineCode",{parentName:"li"},"GetItem")," request, which increases your DynamoDB bill.\nIt becomes worse if you consider eventual consistency and opt for strongly consistent reads as they are twice as costly."),(0,i.kt)("li",{parentName:"ol"},"Additional latency is added due to a full round trip required for the ",(0,i.kt)("inlineCode",{parentName:"li"},"GetItem")," request.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ReturnValuesOnConditionCheckFailure")," addresses both these problems:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task SellItemsAsync(string warehouseId, string itemId, int quantity)\n{\n    try \n    {\n        await _context.UpdateItem<Item>()\n            .WithPrimaryKey(warehouseId, itemId)\n            .WithCondition(cond => cond.On(x => x.Balance).GreaterThanOrEqualTo(10))\n            .WithReturnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure.AllOld)\n            .ExecuteAsync();\n    }\n    catch (ConditionalCheckFailedException e)\n    {\n        // Now the exception contains `Item` property. \n        // It will be set only if WithReturnValuesOnConditionCheckFailure is set.\n        // Note that it's a `Document` type that you can convert to an entity.\n        var item = _context.ToEntity<Wallet>(e.Item!);\n        throw new InsufficientInventoryException(item.Balance);\n    }\n}\n")),(0,i.kt)("p",null,"Using this approach, you receive the balance as it existed at the exact moment of the failed update request, without incurring additional costs or latency in your system."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"ReturnValuesOnConditionCheckFailure")," is available for all ",(0,i.kt)("a",{parentName:"p",href:"/docs/dev-guide/high-level/write"},"single-item write operations")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/dev-guide/high-level/transact#transactwriteitems"},"transactional writes"),".")),(0,i.kt)("h2",{id:"more-predefined-region-endpoints"},"More predefined region endpoints"),(0,i.kt)("p",null,"Since the initial release of EfficientDynamoDb, several new AWS regions have been introduced.\nWhile it was always possible to ",(0,i.kt)("a",{parentName:"p",href:"/docs/dev-guide/configuration/region-endpoint#create-regions-dynamically"},"create regions dynamically"),", all regions supported by DynamoDB are now available as static properties of ",(0,i.kt)("inlineCode",{parentName:"p"},"RegionEndpoint"),"."),(0,i.kt)("p",null,"List of new regions added in EfficientDynamoDb 0.9.15:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ap-south-2")," - Asia Pacific (Hyderabad)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ap-southeast-3")," - Asia Pacific (Jakarta)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ap-southeast-4")," - Asia Pacific (Melbourne)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"eu-central-2")," - Europe (Zurich)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"eu-south-2")," - Europe (Spain)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"me-central-1")," - Middle East (UAE)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"il-central-1")," - Israel (Tel Aviv)")),(0,i.kt)("h2",{id:"other-improvements"},"Other improvements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Error parsing was tuned to handle the most frequent DynamoDB errors more efficiently."),(0,i.kt)("li",{parentName:"ul"},"Added XML docs for UpdateExpression builder to improve developer experience.")))}m.isMDXComponent=!0}}]);