"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1276],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6008:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={id:"scan-builder",title:"Scan Request Builder",sidebar_label:"Scan",slug:"../../api-reference/builders/scan"},l=void 0,o={unversionedId:"api_reference/builders/scan-builder",id:"api_reference/builders/scan-builder",title:"Scan Request Builder",description:"Overview",source:"@site/docs/api_reference/builders/scan-builder.md",sourceDirName:"api_reference/builders",slug:"/api-reference/builders/scan",permalink:"/EfficientDynamoDb/docs/api-reference/builders/scan",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/api_reference/builders/scan-builder.md",tags:[],version:"current",frontMatter:{id:"scan-builder",title:"Scan Request Builder",sidebar_label:"Scan",slug:"../../api-reference/builders/scan"},sidebar:"someSidebar",previous:{title:"Query",permalink:"/EfficientDynamoDb/docs/api-reference/builders/query"},next:{title:"Select Mode",permalink:"/EfficientDynamoDb/docs/api-reference/options/select-mode"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Scan Configuration",id:"scan-configuration",level:2},{value:"FromIndex",id:"fromindex",level:3},{value:"Parameters",id:"fromindex-parameters",level:4},{value:"Example",id:"fromindex-example",level:4},{value:"WithConsistentRead",id:"withconsistentread",level:3},{value:"Parameters",id:"withconsistentread-parameters",level:4},{value:"Example",id:"withconsistentread-example",level:4},{value:"WithLimit",id:"withlimit",level:3},{value:"Parameters",id:"withlimit-parameters",level:4},{value:"Example",id:"withlimit-parameters",level:4},{value:"ReturnConsumedCapacity",id:"returnconsumedcapacity",level:3},{value:"Parameters",id:"returnconsumedcapacity-parameters",level:4},{value:"Example",id:"returnconsumedcapacity-example",level:4},{value:"WithSelectMode",id:"withselectmode",level:3},{value:"Parameters",id:"withselectmode-parameters",level:4},{value:"Example",id:"withselectmode-example",level:4},{value:"BackwardSearch",id:"backwardsearch",level:3},{value:"Parameters",id:"backwardsearch-parameters",level:4},{value:"Example",id:"backwardsearch-example",level:4},{value:"WithFilterExpression (Explicit condition)",id:"withfilterexpression",level:3},{value:"Parameters",id:"withfilterexpression-parameters",level:4},{value:"Example",id:"withfilterexpression-example",level:4},{value:"WithFilterExpression (Function condition)",id:"withfilterexpression-func",level:3},{value:"Parameters",id:"withfilterexpression-func-parameters",level:4},{value:"Example",id:"withfilterexpression-func-example",level:4},{value:"WithPaginationToken",id:"withpaginationtoken",level:3},{value:"Parameters",id:"withpaginationtoken-parameters",level:4},{value:"Example",id:"withpaginationtoken-example",level:4},{value:"AsProjections (With type)",id:"asprojections-type",level:3},{value:"Example",id:"asprojections-type-example",level:4},{value:"AsProjections (With attributes)",id:"asprojections-type-attributes",level:3},{value:"Parameters",id:"asprojections-type-attributes-parameters",level:4},{value:"Example",id:"asprojections-type-attributes-example",level:4},{value:"WithProjectedAttributes",id:"withprojectedattributes",level:3},{value:"Parameters",id:"withprojectedattributes-parameters",level:4},{value:"Example",id:"withprojectedattributes-example",level:4},{value:"AsDocumets",id:"asdocuments",level:3},{value:"Example",id:"asdocuments-example",level:4},{value:"Scan Execution",id:"scan-execution",level:2},{value:"ToPageAsync",id:"topage",level:3},{value:"Parameters",id:"topage-parameters",level:4},{value:"Example",id:"topage-example",level:4},{value:"ToResponseAsync",id:"toresponse",level:3},{value:"Parameters",id:"toresponse-parameters",level:4},{value:"Example",id:"toresponse-example",level:4},{value:"ToAsyncEnumerable",id:"toasyncenumerable",level:3},{value:"Example",id:"toasyncenumerable-example",level:4},{value:"ToPagedAsyncEnumerable",id:"topagedasyncenumerable",level:3},{value:"Example",id:"topagedasyncenumerable-example",level:4}],u={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"This section describes the EfficientDynamoDb API for building the ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," request."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IScanEntityRequestBuilder<TEntity>")," interface provides a builder pattern for constructing a ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," operation in DynamoDB.\nIt is designed to work with a database entity of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TEntity"),"."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamoDbContext.Scan<TEntity>()")," method to get the builder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var builder = ddbContext.Scan<EntityClass>();\n")),(0,i.kt)("p",null,"There are no required configuration methods for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," request.\nAll builder methods are optional and can be omitted.\nIn this case, DynamoDB will use the default behavior."),(0,i.kt)("h2",{id:"scan-configuration"},"Scan Configuration"),(0,i.kt)("h3",{id:"fromindex"},"FromIndex"),(0,i.kt)("p",null,"Specifies the index name to use for the Scan operation.\nCan be used for both GSI and LSI."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> FromIndex(string indexName);\n")),(0,i.kt)("h4",{id:"fromindex-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"indexName"),": Name of the index.")),(0,i.kt)("h4",{id:"fromindex-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.FromIndex("indexName");\n')),(0,i.kt)("h3",{id:"withconsistentread"},"WithConsistentRead"),(0,i.kt)("p",null,"Specifies whether to use a consistent read in the Scan operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithConsistentRead(bool useConsistentRead);\n")),(0,i.kt)("p",null,"If not specified, DynamoDB will use eventually consistent read."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Consistent reads are not supported for Scan requests against GSIs.")),(0,i.kt)("h4",{id:"withconsistentread-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useConsistentRead"),": Set this to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if you want a consistent read.\nOtherwise, set it to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".\nSetting it to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," is equivalent to not using the ",(0,i.kt)("inlineCode",{parentName:"li"},"WithConsistentRead()")," method at all.")),(0,i.kt)("h4",{id:"withconsistentread-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithConsistentRead(true);\n")),(0,i.kt)("h3",{id:"withlimit"},"WithLimit"),(0,i.kt)("p",null,"Specifies the maximum number of items to query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithLimit(int limit);\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The actual number of items returned may be less than specified when filter expression is present or if the scan operation exceeds the 1 MB limit or retrieved data.\nRefer to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html"},"AWS developer guide")," for more information.")),(0,i.kt)("h4",{id:"withlimit-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"limit"),": Maximum number of items to query.")),(0,i.kt)("h4",{id:"withlimit-parameters"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithLimit(50);\n")),(0,i.kt)("h3",{id:"returnconsumedcapacity"},"ReturnConsumedCapacity"),(0,i.kt)("p",null,"Specifies the consumed capacity details to include in the response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> ReturnConsumedCapacity(ReturnConsumedCapacity consumedCapacityMode);\n")),(0,i.kt)("p",null,"If not specified, no consumed capacity info is returned in the response."),(0,i.kt)("h4",{id:"returnconsumedcapacity-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"consumedCapacityMode"),": The type of consumed capacity information to return.\nSetting it to ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity.None")," is equivalent to not using the ",(0,i.kt)("inlineCode",{parentName:"li"},"ReturnConsumedCapacity()")," method at all.")),(0,i.kt)("h4",{id:"returnconsumedcapacity-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.ReturnConsumedCapacity(ReturnConsumedCapacity.Total);\n")),(0,i.kt)("h3",{id:"withselectmode"},"WithSelectMode"),(0,i.kt)("p",null,"Specify the select mode for the Scan operation.\nIt affects what data will be returned in response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithSelectMode(Select selectMode);\n")),(0,i.kt)("h4",{id:"withselectmode-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selectMode"),": Select mode to use for the query operation.\nLearn more about possible modes ",(0,i.kt)("a",{parentName:"li",href:"../options/select-mode"},"here"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use one of the projection methods instead of specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"SpecificAttributes")," mode:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#withprojectedattributes"},"WithProjectedAttributes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#asprojections-type"},(0,i.kt)("inlineCode",{parentName:"a"},"AsProjections")," with type")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#asprojections-type-attributes"},(0,i.kt)("inlineCode",{parentName:"a"},"AsProjections")," with attributes")))),(0,i.kt)("h4",{id:"withselectmode-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithSelectMode(Select.Count);\n")),(0,i.kt)("h3",{id:"backwardsearch"},"BackwardSearch"),(0,i.kt)("p",null,"Specifies if backward search should be used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> BackwardSearch(bool useBackwardSearch);\n")),(0,i.kt)("h4",{id:"backwardsearch-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useBackwardSearch"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", if backward search should be used. Otherwise, ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("h4",{id:"backwardsearch-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.BackwardSearch(true);\n")),(0,i.kt)("h3",{id:"withfilterexpression"},"WithFilterExpression (Explicit condition)"),(0,i.kt)("p",null,"Specifies the filter expression for the Scan operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithFilterExpression(FilterBase filterExpressionBuilder);\n")),(0,i.kt)("h4",{id:"withfilterexpression-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filterExpressionBuilder"),": Filter expression for query. Refer to our ",(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"condition expression building guide")," to learn how to build key expression in EfficientDynamoDb.")),(0,i.kt)("h4",{id:"withfilterexpression-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var expr = Condition<EntityClass>.On(item => item.FirstName).EqualTo("John");\nbuilder = builder.WithFilterExpression(expr);\n')),(0,i.kt)("h3",{id:"withfilterexpression-func"},"WithFilterExpression (Function condition)"),(0,i.kt)("p",null,"Specifies the filter expression function for the Scan operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithFilterExpression(Func<EntityFilter<TEntity>, FilterBase> filterSetup);\n")),(0,i.kt)("h4",{id:"withfilterexpression-func-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filterSetup"),": Filter expression function for query. Refer to our ",(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"condition expression building guide")," to learn how to build key expression in EfficientDynamoDb.")),(0,i.kt)("h4",{id:"withfilterexpression-func-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithFilterExpression(\n    cond => cond.On(item => item.FirstName).EqualTo("John")\n);\n')),(0,i.kt)("h3",{id:"withpaginationtoken"},"WithPaginationToken"),(0,i.kt)("p",null,"Specifies the pagination token for the Scan operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithPaginationToken(string? paginationToken);\n")),(0,i.kt)("h4",{id:"withpaginationtoken-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paginationToken"),": The pagination token to use.\nPassing ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," results in the same behavior as not specifying the pagination token at all.")),(0,i.kt)("h4",{id:"withpaginationtoken-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder = builder.WithPaginationToken("yourToken");\n')),(0,i.kt)("h3",{id:"asprojections-type"},"AsProjections (With type)"),(0,i.kt)("p",null,"Projects the retrieved items to the specified type.\nOnly properties present in ",(0,i.kt)("inlineCode",{parentName:"p"},"TProjection")," will be retrieved."),(0,i.kt)("p",null,"This method returns a different type of the builder to preserve the projection type.\nIn case of chained calls and/or using ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," to save builder to a variable, the change of returned type may be unnoticeable.\nThis is by design and you should be able to mix regular and projected builders."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity, TProjection> AsProjections<TProjection>() where TProjection : class;\n")),(0,i.kt)("h4",{id:"asprojections-type-example"},"Example"),(0,i.kt)("p",null,"Since the change of returned builder type, it can't be assigned to the same variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var projectedBuilder = builder.AsProjections<ProjectedEntity>();\n")),(0,i.kt)("h3",{id:"asprojections-type-attributes"},"AsProjections (With attributes)"),(0,i.kt)("p",null,"Projects the retrieved items to the specified type, but only retrieves the properties specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," parameter.\nOther properties will have default values."),(0,i.kt)("p",null,"Similarly to ",(0,i.kt)("a",{parentName:"p",href:"#asprojections-type"},(0,i.kt)("inlineCode",{parentName:"a"},"AsProjection<TProjection>()")),", this method returns a different type of the builder to preserve the projection type with all the previously explained consequences."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity, TProjection> AsProjections<TProjection>(params Expression<Func<TProjection, object>>[] properties) where TProjection : class;\n")),(0,i.kt)("h4",{id:"asprojections-type-attributes-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"properties"),": The attributes to project.")),(0,i.kt)("h4",{id:"asprojections-type-attributes-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var projectedBuilder = builder.AsProjections<ProjectedEntity>(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n")),(0,i.kt)("p",null,"After execution, this ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," request will return instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ProjectedEntity")," with only ",(0,i.kt)("inlineCode",{parentName:"p"},"SomeProperty")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnotherProperty")," set.\nAll other properties will have default values."),(0,i.kt)("h3",{id:"withprojectedattributes"},"WithProjectedAttributes"),(0,i.kt)("p",null,"Specifies the attributes to project in the retrieved item.\nOnly properties specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," will be retrieved. Other properties will have default values."),(0,i.kt)("p",null,"Contrary to ",(0,i.kt)("inlineCode",{parentName:"p"},"AsProjection")," methods, ",(0,i.kt)("inlineCode",{parentName:"p"},"WithProjectedAttributes")," doesn't change the type of returned entity and builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanEntityRequestBuilder<TEntity> WithProjectedAttributes(params Expression<Func<TEntity, object>>[] properties);\n")),(0,i.kt)("h4",{id:"withprojectedattributes-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"properties"),": The attributes to project.")),(0,i.kt)("h4",{id:"withprojectedattributes-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"builder = builder.WithProjectedAttributes(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n")),(0,i.kt)("p",null,"After execution, this ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," request will return the original entity of the builder (in this example it's ",(0,i.kt)("inlineCode",{parentName:"p"},"EntityClass"),") with only ",(0,i.kt)("inlineCode",{parentName:"p"},"SomeProperty")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnotherProperty")," set.\nAll other properties will have default values."),(0,i.kt)("h3",{id:"asdocuments"},"AsDocumets"),(0,i.kt)("p",null,"Represents the returned items as ",(0,i.kt)("inlineCode",{parentName:"p"},"Document"),"."),(0,i.kt)("p",null,"Similarly to ",(0,i.kt)("a",{parentName:"p",href:"#asprojection-type"},(0,i.kt)("inlineCode",{parentName:"a"},"AsProjection<TProjection>()")),", this operation returns different type of builder with all the previously explained consequences."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IScanDocumentRequestBuilder<TEntity> AsDocuments();\n")),(0,i.kt)("h4",{id:"asdocuments-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var documentBuilder = builder.AsDocuments();\n")),(0,i.kt)("h2",{id:"scan-execution"},"Scan Execution"),(0,i.kt)("p",null,"There are 3 versions of every query execution method: regular, projected, and document.\nAll versions have same parameters, the only difference is entity type returned value:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In most cases, the original entity ",(0,i.kt)("inlineCode",{parentName:"li"},"TEntity")," is returned."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"AsProjection<TProjection>()")," was used during the configuration, the execution method will contain the entity type of ",(0,i.kt)("inlineCode",{parentName:"li"},"TProjection"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"AsDocuments()")," was used, the execution method will contain the entity type of ",(0,i.kt)("inlineCode",{parentName:"li"},"Document"),".")),(0,i.kt)("p",null,"For simplicity, this document covers only regular version of execution methods."),(0,i.kt)("h3",{id:"topage"},"ToPageAsync"),(0,i.kt)("p",null,"Executes the Scan operation and returns the page of data with pagination token."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<PagedResult<TEntity>> ToPageAsync(CancellationToken cancellationToken = default);\n")),(0,i.kt)("h4",{id:"topage-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cancellationToken"),": Token that can be used to cancel the task.")),(0,i.kt)("h4",{id:"topage-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var page = await builder.ToPageAsync();\nvar items = page.Items;\nvar paginationToken = page.PaginationToken;\n")),(0,i.kt)("h3",{id:"toresponse"},"ToResponseAsync"),(0,i.kt)("p",null,"Executes the Scan operation and returns the deserialized response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Task<ScanEntityResponse<TEntity>> ToResponseAsync(CancellationToken cancellationToken = default);\n")),(0,i.kt)("h4",{id:"toresponse-parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cancellationToken"),": Token that can be used to cancel the task.")),(0,i.kt)("h4",{id:"toresponse-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var response = await builder.ToResponseAsync();\n")),(0,i.kt)("h3",{id:"toasyncenumerable"},"ToAsyncEnumerable"),(0,i.kt)("p",null,"Executes the Scan operation and returns the result as an async enumerable, with each item in the sequence representing a single retrieved item."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IAsyncEnumerable<TEntity> ToAsyncEnumerable();\n")),(0,i.kt)("h4",{id:"toasyncenumerable-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"await foreach(var item in builder.ToAsyncEnumerable())\n{\n    // Do something.\n}\n")),(0,i.kt)("h3",{id:"topagedasyncenumerable"},"ToPagedAsyncEnumerable"),(0,i.kt)("p",null,"Executes the Scan operation and returns the result as an async enumerable, with each item in the sequence representing a page of DynamoDB items."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"IAsyncEnumerable<IReadOnlyList<TEntity>> ToPagedAsyncEnumerable();\n")),(0,i.kt)("h4",{id:"topagedasyncenumerable-example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"await foreach(var page in builder.ToAsyncEnumerable())\n{\n    var items = page.Items;\n    var paginationToken = page.PaginationToken;\n\n    // Do something.\n}\n")))}d.isMDXComponent=!0}}]);