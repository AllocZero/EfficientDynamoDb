"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4675],{4290:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dev_guide/high_level/read","title":"Reading Data","description":"DynamoDB provides three main operations for reads:","source":"@site/docs/dev_guide/high_level/read.md","sourceDirName":"dev_guide/high_level","slug":"/dev-guide/high-level/read","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/read","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/read.md","tags":[],"version":"current","frontMatter":{"id":"read","title":"Reading Data","slug":"../../dev-guide/high-level/read"},"sidebar":"someSidebar","previous":{"title":"Attributes","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/attributes"},"next":{"title":"Writing Data","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/write"}}');var t=s(3420),a=s(5404);const r={id:"read",title:"Reading Data",slug:"../../dev-guide/high-level/read"},o=void 0,d={},c=[{value:"Retrieving an item",id:"retrieving-an-item",level:2},{value:"Querying data",id:"querying-data",level:2},{value:"Using Query with GSIs and LSIs (Global and Local Secondary Indexes)",id:"using-query-with-gsis-and-lsis-global-and-local-secondary-indexes",level:3},{value:"Scanning data",id:"scanning-data",level:2},{value:"Parallel Scan",id:"parallel-scan",level:3},{value:"Using Scan with GSIs and LSIs (Global and Local Secondary Indexes)",id:"using-scan-with-gsis-and-lsis-global-and-local-secondary-indexes",level:3},{value:"Document returns",id:"document-returns",level:2},{value:"Projections",id:"projections",level:2},{value:"Indexing",id:"indexing",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Useful links",id:"useful-links",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"DynamoDB provides three main operations for reads:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetItem"})," - Read a single item."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Query"})," - Get items from a single partition based on provided query expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Scan"})," - Get all items from a table with a possibility to filter some of the results out."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB also supports a ",(0,t.jsx)(n.code,{children:"BatchGetItem"})," operation for executing up to 100 ",(0,t.jsx)(n.code,{children:"GetItem"})," operations in a single request.\nIt's covered in ",(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/batch",children:"batch operations guide"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"retrieving-an-item",children:"Retrieving an item"}),"\n",(0,t.jsxs)(n.p,{children:["To read an item from a DynamoDB table, use the ",(0,t.jsx)(n.code,{children:"GetItem"})," operation.\nYou must provide a type marked by the ",(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/attributes#dynamodbtable",children:"DynamoDbTable"})," attribute."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You must specify the ",(0,t.jsx)(n.em,{children:"entire"})," primary key, not just part of it.\nFor example, if a table has a composite primary key (partition key and sort key), you must supply a value for the partition key and a value for the sort key."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey", "sortKey");\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can use the fluent API when you need better control over the operation behavior."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var item = await ddbContext.GetItem<EntityClass>()\n    .WithConsistentRead(true)\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .ToItemAsync();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"querying-data",children:"Querying data"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Query"})," operation in Amazon DynamoDB finds items based on primary key values."]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"Query"})," is a rather complicated operation, you can only use the fluent API to perform it.\nYou must provide the ",(0,t.jsx)(n.code,{children:"KeyExpression"})," in every request."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var condition = Condition<EntityClass>.On(x => x.Pk).EqualTo("test");\n\nvar items = await ddbContext.Query<EntityClass>()\n    .WithKeyExpression(condition)\n    .ToListAsync();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Instead of creating ",(0,t.jsx)(n.code,{children:"Condition<T>"})," explicitly, you can utilize the overload that accepts ",(0,t.jsx)(n.code,{children:"Func<EntityFilter<TEntity>, FilterBase>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var items = await ddbContext.Query<EntityClass>()\n    .WithKeyExpression(cond => cond.On(item => item.Pk).EqualTo("test"))\n    .ToListAsync();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB can only return up to 1 MB of data per response.\nIf your query contains more, DynamoDB will paginate the response.\nIn this case, ",(0,t.jsx)(n.code,{children:"ToListAsync()"})," makes multiple calls until all the data is fetched and put into a single resulting array."]}),"\n",(0,t.jsxs)(n.p,{children:["Check the ",(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions",children:"condition building guide"})," for detailed information about the condition builder API."]}),"\n",(0,t.jsx)(n.h3,{id:"using-query-with-gsis-and-lsis-global-and-local-secondary-indexes",children:"Using Query with GSIs and LSIs (Global and Local Secondary Indexes)"}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB supports two types of indexes: Global Secondary Indexes (GSIs) and Local Secondary Indexes (LSIs).\nEfficientDynamoDb can utilize both types of indexes using the same API.\nFor both types, use ",(0,t.jsx)(n.code,{children:".FromIndex(string indexName)"})," method to run the query against the index."]}),"\n",(0,t.jsxs)(n.p,{children:["Example of ",(0,t.jsx)(n.code,{children:"Query"})," on GSI or LSI:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var items = await ddbContext.Query<EntityClass>()\n    .FromIndex("IndexName")\n    .WithKeyExpression(c => c.On(item => item.IndexPk).EqualTo("IndexPartitionKeyValue"))\n    .ToListAsync();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"scanning-data",children:"Scanning data"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Scan"})," operation iterates over the whole table and returns values that satisfy ",(0,t.jsx)(n.code,{children:"FilterExpression"}),", if provided.\nThe Fluent API is the only option for high-level scanning."]}),"\n",(0,t.jsxs)(n.p,{children:["Unlike ",(0,t.jsx)(n.code,{children:"Query"}),", the ",(0,t.jsx)(n.code,{children:"Scan"})," API doesn't have a ",(0,t.jsx)(n.code,{children:"ToListAsync()"})," method to encourage better table design for your DB and correct scanning usage.\nThe closest replacement is ",(0,t.jsx)(n.code,{children:"ToAsyncEnumerable()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var scan = ddbContext.Scan<EntityClass>();\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parallel-scan",children:"Parallel Scan"}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB supports parallel scans which are straightforward to use with EfficientDynamoDb.\nAll you need to do is decide the number of scanning segments and pass it in the ",(0,t.jsx)(n.code,{children:"ToParallelAsyncEnumerable(...)"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var scan = ddbContext.Scan<EntityClass>();\nvar segmentsCount = 8;\n\nawait foreach (var item in scan.ToParallelAsyncEnumerable(segmentsCount))\n{\n    // Process an item here.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-scan-with-gsis-and-lsis-global-and-local-secondary-indexes",children:"Using Scan with GSIs and LSIs (Global and Local Secondary Indexes)"}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB supports two types of indexes: Global Secondary Indexes (GSIs) and Local Secondary Indexes (LSIs).\nEfficientDynamoDb can utilize both types of indexes using the same API.\nFor both types, use ",(0,t.jsx)(n.code,{children:".FromIndex(string indexName)"})," method to run the query against the index."]}),"\n",(0,t.jsxs)(n.p,{children:["Example of ",(0,t.jsx)(n.code,{children:"Scan"})," on GSI or LSI:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var scan = ddbContext.Scan<EntityClass>().FromIndex("IndexName");\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"document-returns",children:"Document returns"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes, your queries return different entities in a single response.\nThis frequently happens when using a single-table design."}),"\n",(0,t.jsxs)(n.p,{children:["The Fluent API allows you to return ",(0,t.jsx)(n.code,{children:"Document"})," objects instead of your entities which you can convert to correct entities in applications code.\nJust call the ",(0,t.jsx)(n.code,{children:"AsDocument()"})," (for ",(0,t.jsx)(n.code,{children:"GetItem"}),") or ",(0,t.jsx)(n.code,{children:"AsDocuments()"})," (for ",(0,t.jsx)(n.code,{children:"Query"})," and ",(0,t.jsx)(n.code,{children:"Scan"}),") anywhere in the call chain before the executing method\n(e.g., ",(0,t.jsx)(n.code,{children:"ToItemAsync()"})," for ",(0,t.jsx)(n.code,{children:"GetItem"}),", ",(0,t.jsx)(n.code,{children:"ToListAsync()"})," for ",(0,t.jsx)(n.code,{children:"Query"}),", etc.)"]}),"\n",(0,t.jsx)(n.p,{children:"For example, consider the case when a single query returns the user's profile data and a list of his transactions."}),"\n",(0,t.jsxs)(n.p,{children:["Retrieving documents using the ",(0,t.jsx)(n.code,{children:"Query"})," operation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var condition = Condition<EntityClass>.On(x => x.Pk).EqualTo("test");\n\nvar documents = await ddbContext.Query<EntityClass>()\n    .WithKeyExpression(condition)\n    .AsDocuments()\n    .ToListAsync();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Mapping documents to entities can be done by calling the ",(0,t.jsx)(n.code,{children:"Document.ToObject<T>()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// sort key prefix determines the \'type\' of item\nvar userInfoDocument = documents.First(x => x["sortKey"].StartsWith("userInfo#"));\n\n// convert Document to entity class\nvar userInfo = ddbContext.ToObject<UserInfo>(userInfoDocument); \n\n// assuming that all other items except user info are transactions\nvar transactions = documents.Except(userInfoDocument) \n    .Select(x => ddbContext.ToObject<UserTransaction>(x))\n    .ToList();\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GetItem"})," document example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var item = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .AsDocument()\n    .ToItemAsync();\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Scan"})," example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var scan = ddbContext.Scan<EntityClass>().AsDocuments();\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"projections",children:"Projections"}),"\n",(0,t.jsx)(n.p,{children:"Use projections to retrieve only specific attributes of item(s).\nAll read operations support projection using the same API."}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"AsProjection<TProjection>()"})," method to get a projection to the specified class."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Projected class and its properties must be marked with corresponding attributes in the same way as entities are marked!"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var projectedItem = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .AsProjection<ProjectionClass>()\n    .ToItemAsync()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"WithProjectedAttributes(...)"})," method if you don't want to create a separate projection class.\nWhen this method is used, the response will keep the original entity class but pull and populate only specified attributes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Passing the same property multiple times is not allowed!"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var item = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .WithProjectedAttributes(x => x.FirstName, x => x.LastName)\n    .ToItemAsync()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"indexing",children:"Indexing"}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB supports two types of indexes: Global Secondary Indexes (GSIs) and Local Secondary Indexes (LSIs).\n",(0,t.jsx)(n.code,{children:"Scan"})," and ",(0,t.jsx)(n.code,{children:"Query"})," operations can utilize both types of indexes using the same API in EfficientDynamoDb.\nIn both cases, use ",(0,t.jsx)(n.code,{children:".FromIndex(string indexName)"})," method to run your request against the index."]}),"\n",(0,t.jsxs)(n.p,{children:["Example of ",(0,t.jsx)(n.code,{children:"Query"})," on GSI or LSI:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var items = await ddbContext.Query<EntityClass>()\n    .FromIndex("IndexName")\n    .WithKeyExpression(c => c.On(item => item.IndexPk).EqualTo("IndexPartitionKeyValue"))\n    .ToListAsync();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Example of ",(0,t.jsx)(n.code,{children:"Scan"})," on GSI or LSI:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var items = await ddbContext.Scan<EntityClass>()\n    .FromIndex("IndexName")\n    .WithFilterExpression(c => c.On(item => item.IndexPk).EqualTo("IndexPartitionKeyValue"))\n    .ToListAsync();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Scan"})," and ",(0,t.jsx)(n.code,{children:"Query"})," have two ways of handling paginated requests.\nAPIs for both operations are the same, so that the following examples will show only ",(0,t.jsx)(n.code,{children:"Query"})," for the sake of simplicity."]}),"\n",(0,t.jsxs)(n.p,{children:["The easiest way to handle a paginated request manually is to use ",(0,t.jsx)(n.code,{children:"ToAsyncEnumerable()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"await foreach (var item in query.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There are also cases when you might need to manage pagination tokens yourself.\nTo do so, use the ",(0,t.jsx)(n.code,{children:"ToPageAsync()"})," to get the pagination token in response and then pass it to the subsequent request."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var page = await query.ToPageAsync();\n\nvar nextPage = await query.WithPaginationToken(page.PaginationToken)\n    .ToPageAsync();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: ",(0,t.jsxs)(n.em,{children:["Due to the internals of the DynamoDB, ",(0,t.jsx)(n.code,{children:"page.Items"})," being empty doesn't mean that there are no more data to read."]}),"\n",(0,t.jsxs)(n.em,{children:["The only way to know that all data is retrieved is by checking the ",(0,t.jsx)(n.code,{children:"page.PaginationToken"})," value. It is ",(0,t.jsx)(n.code,{children:"null"})," when there are no more items to pull"]}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsxs)(n.p,{children:["DynamoDB supports filtering results returned by ",(0,t.jsx)(n.code,{children:"Scan"})," and ",(0,t.jsx)(n.code,{children:"Query"})," by providing a ",(0,t.jsx)(n.code,{children:"FilterExpression"})," in requests.\nEfficientDynamoDb provides the same API for specifying filters for both operations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var condition = Condition<EntityClass>.On(x => x.FirstName).EqualTo("John");\n\nvar scan = ddbContext.Scan<EntityClass>()\n    .WithFilterExpression(condition);\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Keep in mind that filtering doesn't reduce your RCU consumption, but it reduces transferred data size, thus reducing latency and network usage."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions",children:"Conditions builder API"})," for filter expressions is the same API used for key expressions."]}),"\n",(0,t.jsx)(n.h2,{id:"useful-links",children:"Useful links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["API references","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/get-item",children:"GetItem"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/query",children:"Query"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/scan",children:"Scan"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions",children:"Condition Builder guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6672);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);