"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3565],{5404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var i=n(6672);const s={},t=i.createContext(s);function o(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:r},e.children)}},7468:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"dev_guide/high_level/error-handling","title":"Error handling","description":"error-handling}","source":"@site/docs/dev_guide/high_level/error-handling.md","sourceDirName":"dev_guide/high_level","slug":"/dev-guide/high-level/error-handling","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/error-handling.md","tags":[],"version":"current","frontMatter":{"id":"error-handling","title":"Error handling","slug":"../../dev-guide/high-level/error-handling"},"sidebar":"someSidebar","previous":{"title":"Building Update Expressions","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/update-expression"},"next":{"title":"Low-Level API","permalink":"/EfficientDynamoDb/docs/dev-guide/low-level"}}');var s=n(3420),t=n(5404);const o={id:"error-handling",title:"Error handling",slug:"../../dev-guide/high-level/error-handling"},l="Error handling {#error-handling}",d={},c=[{value:"Throwing exceptions",id:"throwing-exceptions",level:2},{value:"Returning errors as results",id:"returning-errors-as-results",level:2},{value:"<code>OpResult</code> vs <code>OpResult&lt;T&gt;</code>",id:"opresult-vs-opresultt",level:3},{value:"Handling error results",id:"handling-error-results",level:3},{value:"Checking <code>ErrorType</code> and using <code>As</code> methods",id:"checking-errortype-and-using-as-methods",level:4},{value:"Using pattern matching",id:"using-pattern-matching",level:4}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"error-handling",children:"Error handling"})}),"\n",(0,s.jsx)(r.p,{children:"EfficientDynamoDb supports two ways of handling DynamoDB errors:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Throwing exceptions (default behavior)"}),"\n",(0,s.jsxs)(r.li,{children:["Suppressing exceptions and returning ",(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/error-handling/op-result#op-result",children:(0,s.jsx)(r.code,{children:"OpResult"})})," or ",(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/error-handling/op-result#op-result-t",children:(0,s.jsx)(r.code,{children:"OpResult<T>"})}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.admonition,{type:"note",children:(0,s.jsxs)(r.p,{children:["Both approaches utilize ",(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/dev-guide/configuration/retry-strategies",children:"retry strategies"})," before throwing an exception or returning an error result."]})}),"\n",(0,s.jsx)(r.h2,{id:"throwing-exceptions",children:"Throwing exceptions"}),"\n",(0,s.jsxs)(r.p,{children:["Throwing exceptions is the default behavior.\nAfter encountering an error and after all retries are exhausted, an ",(0,s.jsx)(r.code,{children:"DdbException"})," is thrown."]}),"\n",(0,s.jsx)(r.h2,{id:"returning-errors-as-results",children:"Returning errors as results"}),"\n",(0,s.jsxs)(r.p,{children:["This behavior can be useful when some error is expected to happen, e.g. when table is throttled.\nTo enable this behavior, use ",(0,s.jsx)(r.code,{children:"SuppressThrowing()"})," method with a builder API for any data plane operation:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/get-item#suppressthrowing",children:"GetItem"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/put-item#suppressthrowing",children:"PutItem"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/update-item#suppressthrowing",children:"UpdateItem"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/delete-item#suppressthrowing",children:"DeleteItem"})}),"\n",(0,s.jsx)(r.li,{children:"BatchGetItem"}),"\n",(0,s.jsx)(r.li,{children:"BatchWriteItem"}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/query#suppressthrowing",children:"Query"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/builders/scan#suppressthrowing",children:"Scan"})}),"\n",(0,s.jsx)(r.li,{children:"TransactGetItems"}),"\n",(0,s.jsx)(r.li,{children:"TransactWriteItems"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"opresult-vs-opresultt",children:[(0,s.jsx)(r.code,{children:"OpResult"})," vs ",(0,s.jsx)(r.code,{children:"OpResult<T>"})]}),"\n",(0,s.jsxs)(r.p,{children:["After applying ",(0,s.jsx)(r.code,{children:"SuppressThrowing()"}),", executing operations will return ",(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/error-handling/op-result#op-result",children:(0,s.jsx)(r.code,{children:"OpResult"})})," or ",(0,s.jsx)(r.a,{href:"/EfficientDynamoDb/docs/api-reference/error-handling/op-result#op-result-t",children:(0,s.jsx)(r.code,{children:"OpResult<T>"})})," instead of throwing an exception.\nThe only difference between these two types is that ",(0,s.jsx)(r.code,{children:"OpResult<T>"})," contains the result of the operation, while ",(0,s.jsx)(r.code,{children:"OpResult"})," doesn't:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"ExecuteAsync()"})," always returns ",(0,s.jsx)(r.code,{children:"OpResult"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"OpResult<T>"})," is returned when ",(0,s.jsx)(r.code,{children:"ToItemAsync()"}),", ",(0,s.jsx)(r.code,{children:"ToResponseAsync()"}),", ",(0,s.jsx)(r.code,{children:"ToListAsync()"})," or similar methods are called."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"handling-error-results",children:"Handling error results"}),"\n",(0,s.jsx)(r.p,{children:"There are two main ways to handle error results."}),"\n",(0,s.jsxs)(r.h4,{id:"checking-errortype-and-using-as-methods",children:["Checking ",(0,s.jsx)(r.code,{children:"ErrorType"})," and using ",(0,s.jsx)(r.code,{children:"As"})," methods"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'var result = await context.GetItem()\n    .WithPrimaryKey("pk", "sk")\n    .SuppressThrowing()\n    .ToItemAsync();\n\nif (result.IsSuccess)\n    return result.Value;\n\nif (result.ErrorType == OpErrorType.ProvisionedThroughputExceeded)\n{\n    var provisionedException = result.AsProvisionedThroughputExceededException();\n    // Handle provisioned throughput exceeded error\n}\n'})}),"\n",(0,s.jsx)(r.h4,{id:"using-pattern-matching",children:"Using pattern matching"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'var result = await context.GetItem()\n    .WithPrimaryKey("pk", "sk")\n    .SuppressThrowing()\n    .ToItemAsync();\n\nif (result.IsSuccess)\n    return result.Value;\n\nif (result.Exception is ProvisionedThroughputExceededException provisionedException)\n{\n    // Handle provisioned throughput exceeded error\n}\n'})})]})}function a(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);