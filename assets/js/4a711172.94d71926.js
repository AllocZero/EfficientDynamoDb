"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9867],{4193:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api_reference/builders/scan-builder","title":"Scan Request Builder","description":"Overview","source":"@site/docs/api_reference/builders/scan-builder.md","sourceDirName":"api_reference/builders","slug":"/api-reference/builders/scan","permalink":"/EfficientDynamoDb/docs/api-reference/builders/scan","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/api_reference/builders/scan-builder.md","tags":[],"version":"current","frontMatter":{"id":"scan-builder","title":"Scan Request Builder","sidebar_label":"Scan","slug":"../../api-reference/builders/scan"},"sidebar":"someSidebar","previous":{"title":"Query","permalink":"/EfficientDynamoDb/docs/api-reference/builders/query"},"next":{"title":"Request Options","permalink":"/EfficientDynamoDb/docs/api-reference/options"}}');var r=i(3420),s=i(5404);const a={id:"scan-builder",title:"Scan Request Builder",sidebar_label:"Scan",slug:"../../api-reference/builders/scan"},l=void 0,c={},d=[{value:"Overview",id:"overview",level:2},{value:"Scan Configuration",id:"scan-configuration",level:2},{value:"FromIndex",id:"fromindex",level:3},{value:"Parameters",id:"fromindex-parameters",level:4},{value:"Example",id:"fromindex-example",level:4},{value:"WithConsistentRead",id:"withconsistentread",level:3},{value:"Parameters",id:"withconsistentread-parameters",level:4},{value:"Example",id:"withconsistentread-example",level:4},{value:"WithLimit",id:"withlimit",level:3},{value:"Parameters",id:"withlimit-parameters",level:4},{value:"Example",id:"withlimit-parameters",level:4},{value:"ReturnConsumedCapacity",id:"returnconsumedcapacity",level:3},{value:"Parameters",id:"returnconsumedcapacity-parameters",level:4},{value:"Example",id:"returnconsumedcapacity-example",level:4},{value:"WithSelectMode",id:"withselectmode",level:3},{value:"Parameters",id:"withselectmode-parameters",level:4},{value:"Example",id:"withselectmode-example",level:4},{value:"BackwardSearch",id:"backwardsearch",level:3},{value:"Parameters",id:"backwardsearch-parameters",level:4},{value:"Example",id:"backwardsearch-example",level:4},{value:"WithFilterExpression (Explicit condition)",id:"withfilterexpression",level:3},{value:"Parameters",id:"withfilterexpression-parameters",level:4},{value:"Example",id:"withfilterexpression-example",level:4},{value:"WithFilterExpression (Function condition)",id:"withfilterexpression-func",level:3},{value:"Parameters",id:"withfilterexpression-func-parameters",level:4},{value:"Example",id:"withfilterexpression-func-example",level:4},{value:"WithPaginationToken",id:"withpaginationtoken",level:3},{value:"Parameters",id:"withpaginationtoken-parameters",level:4},{value:"Example",id:"withpaginationtoken-example",level:4},{value:"AsProjections (With type)",id:"asprojections-type",level:3},{value:"Example",id:"asprojections-type-example",level:4},{value:"AsProjections (With attributes)",id:"asprojections-type-attributes",level:3},{value:"Parameters",id:"asprojections-type-attributes-parameters",level:4},{value:"Example",id:"asprojections-type-attributes-example",level:4},{value:"WithProjectedAttributes",id:"withprojectedattributes",level:3},{value:"Parameters",id:"withprojectedattributes-parameters",level:4},{value:"Example",id:"withprojectedattributes-example",level:4},{value:"AsDocuments",id:"asdocuments",level:3},{value:"Example",id:"asdocuments-example",level:4},{value:"Scan Execution",id:"scan-execution",level:2},{value:"ToPageAsync",id:"topage",level:3},{value:"Parameters",id:"topage-parameters",level:4},{value:"Example",id:"topage-example",level:4},{value:"ToResponseAsync",id:"toresponse",level:3},{value:"Parameters",id:"toresponse-parameters",level:4},{value:"Example",id:"toresponse-example",level:4},{value:"ToAsyncEnumerable",id:"toasyncenumerable",level:3},{value:"Example",id:"toasyncenumerable-example",level:4},{value:"ToPagedAsyncEnumerable",id:"topagedasyncenumerable",level:3},{value:"Example",id:"topagedasyncenumerable-example",level:4}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["This section describes the EfficientDynamoDb API for building the ",(0,r.jsx)(n.code,{children:"Scan"})," request."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"IScanEntityRequestBuilder<TEntity>"})," interface provides a builder pattern for constructing a ",(0,r.jsx)(n.code,{children:"Scan"})," operation in DynamoDB.\nIt is designed to work with a database entity of type ",(0,r.jsx)(n.code,{children:"TEntity"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"DynamoDbContext.Scan<TEntity>()"})," method to get the builder:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var builder = ddbContext.Scan<EntityClass>();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are no required configuration methods for the ",(0,r.jsx)(n.code,{children:"Scan"})," request.\nAll builder methods are optional and can be omitted.\nIn this case, DynamoDB will use the default behavior."]}),"\n",(0,r.jsx)(n.h2,{id:"scan-configuration",children:"Scan Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"fromindex",children:"FromIndex"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the index name to use for the Scan operation.\nCan be used for both GSI and LSI."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> FromIndex(string indexName);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"fromindex-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indexName"}),": Name of the index."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"fromindex-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder = builder.FromIndex("indexName");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"withconsistentread",children:"WithConsistentRead"}),"\n",(0,r.jsx)(n.p,{children:"Specifies whether to use a consistent read in the Scan operation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithConsistentRead(bool useConsistentRead);\n"})}),"\n",(0,r.jsx)(n.p,{children:"If not specified, DynamoDB will use eventually consistent read."}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"Consistent reads are not supported for Scan requests against GSIs."})}),"\n",(0,r.jsx)(n.h4,{id:"withconsistentread-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"useConsistentRead"}),": Set this to ",(0,r.jsx)(n.code,{children:"true"})," if you want a consistent read.\nOtherwise, set it to ",(0,r.jsx)(n.code,{children:"false"}),".\nSetting it to ",(0,r.jsx)(n.code,{children:"false"})," is equivalent to not using the ",(0,r.jsx)(n.code,{children:"WithConsistentRead()"})," method at all."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withconsistentread-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.WithConsistentRead(true);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"withlimit",children:"WithLimit"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the maximum number of items to query."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithLimit(int limit);\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The actual number of items returned may be less than specified when filter expression is present or if the scan operation exceeds the 1 MB limit or retrieved data.\nRefer to ",(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html",children:"AWS developer guide"})," for more information."]})}),"\n",(0,r.jsx)(n.h4,{id:"withlimit-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"}),": Maximum number of items to query."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withlimit-parameters",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.WithLimit(50);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"returnconsumedcapacity",children:"ReturnConsumedCapacity"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the consumed capacity details to include in the response."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> ReturnConsumedCapacity(ReturnConsumedCapacity consumedCapacityMode);\n"})}),"\n",(0,r.jsx)(n.p,{children:"If not specified, no consumed capacity info is returned in the response."}),"\n",(0,r.jsx)(n.h4,{id:"returnconsumedcapacity-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumedCapacityMode"}),": The type of consumed capacity information to return.\nSetting it to ",(0,r.jsx)(n.code,{children:"ReturnConsumedCapacity.None"})," is equivalent to not using the ",(0,r.jsx)(n.code,{children:"ReturnConsumedCapacity()"})," method at all."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returnconsumedcapacity-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.ReturnConsumedCapacity(ReturnConsumedCapacity.Total);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"withselectmode",children:"WithSelectMode"}),"\n",(0,r.jsx)(n.p,{children:"Specify the select mode for the Scan operation.\nIt affects what data will be returned in response."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithSelectMode(Select selectMode);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"withselectmode-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"selectMode"}),": Select mode to use for the query operation.\nLearn more about possible modes ",(0,r.jsx)(n.a,{href:"/EfficientDynamoDb/docs/api-reference/options/select-mode",children:"here"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["Use one of the projection methods instead of specifying ",(0,r.jsx)(n.code,{children:"SpecificAttributes"})," mode:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#withprojectedattributes",children:"WithProjectedAttributes"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#asprojections-type",children:[(0,r.jsx)(n.code,{children:"AsProjections"})," with type"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#asprojections-type-attributes",children:[(0,r.jsx)(n.code,{children:"AsProjections"})," with attributes"]})}),"\n"]})]}),"\n",(0,r.jsx)(n.h4,{id:"withselectmode-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.WithSelectMode(Select.Count);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backwardsearch",children:"BackwardSearch"}),"\n",(0,r.jsx)(n.p,{children:"Specifies if backward search should be used."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> BackwardSearch(bool useBackwardSearch);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"backwardsearch-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"useBackwardSearch"}),": ",(0,r.jsx)(n.code,{children:"true"}),", if backward search should be used. Otherwise, ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"backwardsearch-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.BackwardSearch(true);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"withfilterexpression",children:"WithFilterExpression (Explicit condition)"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the filter expression for the Scan operation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithFilterExpression(FilterBase filterExpressionBuilder);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"withfilterexpression-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filterExpressionBuilder"}),": Filter expression for query. Refer to our ",(0,r.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions",children:"condition expression building guide"})," to learn how to build key expression in EfficientDynamoDb."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withfilterexpression-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var expr = Condition<EntityClass>.On(item => item.FirstName).EqualTo("John");\nbuilder = builder.WithFilterExpression(expr);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"withfilterexpression-func",children:"WithFilterExpression (Function condition)"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the filter expression function for the Scan operation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithFilterExpression(Func<EntityFilter<TEntity>, FilterBase> filterSetup);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"withfilterexpression-func-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filterSetup"}),": Filter expression function for query. Refer to our ",(0,r.jsx)(n.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions",children:"condition expression building guide"})," to learn how to build key expression in EfficientDynamoDb."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withfilterexpression-func-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder = builder.WithFilterExpression(\n    cond => cond.On(item => item.FirstName).EqualTo("John")\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"withpaginationtoken",children:"WithPaginationToken"}),"\n",(0,r.jsx)(n.p,{children:"Specifies the pagination token for the Scan operation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithPaginationToken(string? paginationToken);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"withpaginationtoken-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"paginationToken"}),": The pagination token to use.\nPassing ",(0,r.jsx)(n.code,{children:"null"})," results in the same behavior as not specifying the pagination token at all."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withpaginationtoken-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'builder = builder.WithPaginationToken("yourToken");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"asprojections-type",children:"AsProjections (With type)"}),"\n",(0,r.jsxs)(n.p,{children:["Projects the retrieved items to the specified type.\nOnly properties present in ",(0,r.jsx)(n.code,{children:"TProjection"})," will be retrieved."]}),"\n",(0,r.jsxs)(n.p,{children:["This method returns a different type of the builder to preserve the projection type.\nIn case of chained calls and/or using ",(0,r.jsx)(n.code,{children:"var"})," to save builder to a variable, the change of returned type may be unnoticeable.\nThis is by design and you should be able to mix regular and projected builders."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity, TProjection> AsProjections<TProjection>() where TProjection : class;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"asprojections-type-example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Since the change of returned builder type, it can't be assigned to the same variable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var projectedBuilder = builder.AsProjections<ProjectedEntity>();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"asprojections-type-attributes",children:"AsProjections (With attributes)"}),"\n",(0,r.jsxs)(n.p,{children:["Projects the retrieved items to the specified type, but only retrieves the properties specified in ",(0,r.jsx)(n.code,{children:"properties"})," parameter.\nOther properties will have default values."]}),"\n",(0,r.jsxs)(n.p,{children:["Similarly to ",(0,r.jsx)(n.a,{href:"#asprojections-type",children:(0,r.jsx)(n.code,{children:"AsProjection<TProjection>()"})}),", this method returns a different type of the builder to preserve the projection type with all the previously explained consequences."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity, TProjection> AsProjections<TProjection>(params Expression<Func<TProjection, object>>[] properties) where TProjection : class;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"asprojections-type-attributes-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"properties"}),": The attributes to project."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"asprojections-type-attributes-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var projectedBuilder = builder.AsProjections<ProjectedEntity>(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After execution, this ",(0,r.jsx)(n.code,{children:"Scan"})," request will return instance of ",(0,r.jsx)(n.code,{children:"ProjectedEntity"})," with only ",(0,r.jsx)(n.code,{children:"SomeProperty"})," and ",(0,r.jsx)(n.code,{children:"AnotherProperty"})," set.\nAll other properties will have default values."]}),"\n",(0,r.jsx)(n.h3,{id:"withprojectedattributes",children:"WithProjectedAttributes"}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the attributes to project in the retrieved item.\nOnly properties specified in ",(0,r.jsx)(n.code,{children:"properties"})," will be retrieved. Other properties will have default values."]}),"\n",(0,r.jsxs)(n.p,{children:["Contrary to ",(0,r.jsx)(n.code,{children:"AsProjection"})," methods, ",(0,r.jsx)(n.code,{children:"WithProjectedAttributes"})," doesn't change the type of returned entity and builder."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanEntityRequestBuilder<TEntity> WithProjectedAttributes(params Expression<Func<TEntity, object>>[] properties);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"withprojectedattributes-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"properties"}),": The attributes to project."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"withprojectedattributes-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder = builder.WithProjectedAttributes(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After execution, this ",(0,r.jsx)(n.code,{children:"Scan"})," request will return the original entity of the builder (in this example it's ",(0,r.jsx)(n.code,{children:"EntityClass"}),") with only ",(0,r.jsx)(n.code,{children:"SomeProperty"})," and ",(0,r.jsx)(n.code,{children:"AnotherProperty"})," set.\nAll other properties will have default values."]}),"\n",(0,r.jsx)(n.h3,{id:"asdocuments",children:"AsDocuments"}),"\n",(0,r.jsxs)(n.p,{children:["Represents the returned items as ",(0,r.jsx)(n.code,{children:"Document"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Similarly to ",(0,r.jsx)(n.a,{href:"#asprojections-type",children:(0,r.jsx)(n.code,{children:"AsProjections<TProjection>()"})}),", this operation returns different type of builder with all the previously explained consequences."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IScanDocumentRequestBuilder<TEntity> AsDocuments();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"asdocuments-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var documentBuilder = builder.AsDocuments();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"scan-execution",children:"Scan Execution"}),"\n",(0,r.jsx)(n.p,{children:"There are 3 versions of every query execution method: regular, projected, and document.\nAll versions have same parameters, the only difference is entity type returned value:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In most cases, the original entity ",(0,r.jsx)(n.code,{children:"TEntity"})," is returned."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"AsProjection<TProjection>()"})," was used during the configuration, the execution method will contain the entity type of ",(0,r.jsx)(n.code,{children:"TProjection"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"AsDocuments()"})," was used, the execution method will contain the entity type of ",(0,r.jsx)(n.code,{children:"Document"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For simplicity, this document covers only regular version of execution methods."}),"\n",(0,r.jsx)(n.h3,{id:"topage",children:"ToPageAsync"}),"\n",(0,r.jsx)(n.p,{children:"Executes the Scan operation and returns the page of data with pagination token."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"Task<PagedResult<TEntity>> ToPageAsync(CancellationToken cancellationToken = default);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"topage-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cancellationToken"}),": Token that can be used to cancel the task."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"topage-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var page = await builder.ToPageAsync();\nvar items = page.Items;\nvar paginationToken = page.PaginationToken;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"toresponse",children:"ToResponseAsync"}),"\n",(0,r.jsx)(n.p,{children:"Executes the Scan operation and returns the deserialized response."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"Task<ScanEntityResponse<TEntity>> ToResponseAsync(CancellationToken cancellationToken = default);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"toresponse-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cancellationToken"}),": Token that can be used to cancel the task."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"toresponse-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var response = await builder.ToResponseAsync();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"toasyncenumerable",children:"ToAsyncEnumerable"}),"\n",(0,r.jsx)(n.p,{children:"Executes the Scan operation and returns the result as an async enumerable, with each item in the sequence representing a single retrieved item."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IAsyncEnumerable<TEntity> ToAsyncEnumerable();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"toasyncenumerable-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await foreach(var item in builder.ToAsyncEnumerable())\n{\n    // Do something.\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"topagedasyncenumerable",children:"ToPagedAsyncEnumerable"}),"\n",(0,r.jsx)(n.p,{children:"Executes the Scan operation and returns the result as an async enumerable, with each item in the sequence representing a page of DynamoDB items."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IAsyncEnumerable<IReadOnlyList<TEntity>> ToPagedAsyncEnumerable();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"topagedasyncenumerable-example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await foreach(var page in builder.ToAsyncEnumerable())\n{\n    var items = page.Items;\n    var paginationToken = page.PaginationToken;\n\n    // Do something.\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},5404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6672);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);