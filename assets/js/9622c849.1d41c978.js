"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1582],{1367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"dev_guide/low-level","title":"Low-Level API","description":"EfficientDynamoDb provides access to DynamoDb HTTP API through DynamoDbLowLevelContext class, which can be accessed from DynamoDbContext.LowLevel property.","source":"@site/docs/dev_guide/low-level.md","sourceDirName":"dev_guide","slug":"/dev-guide/low-level","permalink":"/EfficientDynamoDb/docs/dev-guide/low-level","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/low-level.md","tags":[],"version":"current","frontMatter":{"id":"low-level","title":"Low-Level API","slug":"../dev-guide/low-level"},"sidebar":"someSidebar","previous":{"title":"Error handling","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/error-handling"},"next":{"title":"AWS SDK Compatibility","permalink":"/EfficientDynamoDb/docs/dev-guide/sdk-compatibility"}}');var r=n(3420),s=n(5404);const l={id:"low-level",title:"Low-Level API",slug:"../dev-guide/low-level"},c=void 0,o={},a=[{value:"Working with Documents",id:"working-with-documents",level:2},{value:"Accessing values",id:"accessing-values",level:3},{value:"Creating an attribute",id:"creating-an-attribute",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"EfficientDynamoDb"})," provides access to DynamoDb HTTP API through ",(0,r.jsx)(t.code,{children:"DynamoDbLowLevelContext"})," class, which can be accessed from ",(0,r.jsx)(t.code,{children:"DynamoDbContext.LowLevel"})," property."]}),"\n",(0,r.jsx)(t.p,{children:"All low-level operations accept a request object as input and return a single response:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="GetItem Request"',children:'var response = await context.LowLevel.GetItemAsync(new GetItemRequest\n{\n    TableName = "users",\n    Key = new PrimaryKey("partitionKey", "sortKey")\n});\nvar document = response.Item;\n'})}),"\n",(0,r.jsx)(t.h2,{id:"working-with-documents",children:"Working with Documents"}),"\n",(0,r.jsxs)(t.p,{children:["In the low-level API, entities are represented in the form of the ",(0,r.jsx)(t.code,{children:"Document"})," class.\nIt inherits ",(0,r.jsx)(t.code,{children:"Dictionary<string, AttributeValue>"})," and has all dictionary lookup methods, including an indexer for efficient attribute access."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"AttributeValue"})," is a readonly struct representing a single DynamoDb attribute.\nOverall there are 10 different attribute types supported by the database:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"StringAttributeValue"})," - string."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"NumberAttributeValue"})," - number."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"BinaryAttributeValue"})," - binary."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"BooleAttributeValue"})," - boolean."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"NullAttributeVlaue"})," - null."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"MapAttributeValue"})," - map."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ListAttributeValue"})," - list."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"StringSetAttributeValue"})," - string set."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"NumberSetAttributeValue"})," - number set."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"BinarySetAttributeValue"})," - binary set."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"accessing-values",children:"Accessing values"}),"\n",(0,r.jsxs)(t.p,{children:["To understand what exact type is stored inside an ",(0,r.jsx)(t.code,{children:"AttributeValue"})," instance, the ",(0,r.jsx)(t.code,{children:"Type"})," property can be used.\nTo retrieve the underlying value itself, use one of the ",(0,r.jsx)(t.code,{children:"As"})," methods."]}),"\n",(0,r.jsx)(t.p,{children:"For example, a numeric value can be accessed in a couple of ways:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var numberAttribute = attributeValue.AsNumberAttribute();\n\nvar stringValue = numberAttribute.Value;\nvar intValue = numberAttribute.ToInt32();\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["A separate ",(0,r.jsx)(t.code,{children:"ToInt32"})," call is required because in DynamoDb numbers are stored as strings and the final type depends on the application.\nTypes that don't require any type conversions can be accessed directly using methods like ",(0,r.jsx)(t.code,{children:"AsString()"}),", ",(0,r.jsx)(t.code,{children:"AsBool()"})," or ",(0,r.jsx)(t.code,{children:"AsDocument()"}),"."]})}),"\n",(0,r.jsx)(t.h3,{id:"creating-an-attribute",children:"Creating an attribute"}),"\n",(0,r.jsxs)(t.p,{children:["All attribute value types have implicit operators implemented, meaning there is no need to explicitly create the ",(0,r.jsx)(t.code,{children:"AttributeValue"}),".\nInstead, just assign the underlying attribute value type:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'var document = new Document \n{\n    {"age", new NumberAttributeValue("30")}, // Using constructor and implicit conversion to AttributeValue\n    {"first_name", "John"}, // Using implicit conversion from string to AttributeValue\n};\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5404:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var i=n(6672);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);