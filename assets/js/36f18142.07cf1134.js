"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2504],{2308:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"efficient_dynamo_db/design","title":"Design Principles","description":"EfficientDynamoDb is built with performance and scalability in mind. Our main goals are:","source":"@site/docs/efficient_dynamo_db/design.md","sourceDirName":"efficient_dynamo_db","slug":"/design","permalink":"/EfficientDynamoDb/docs/design","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/efficient_dynamo_db/design.md","tags":[],"version":"current","frontMatter":{"id":"design","title":"Design Principles","sidebar_label":"Design Principles","slug":"../design"},"sidebar":"someSidebar","previous":{"title":"Introduction","permalink":"/EfficientDynamoDb/docs/"},"next":{"title":"Getting started","permalink":"/EfficientDynamoDb/docs/dev-guide/getting-started"}}');var t=i(3420),r=i(5404);const a={id:"design",title:"Design Principles",sidebar_label:"Design Principles",slug:"../design"},o=void 0,l={},c=[{value:"Raw Performance",id:"raw-performance",level:2},{value:"RAM Usage and GC Pressure",id:"ram-usage-and-gc-pressure",level:2},{value:"Benchmarks",id:"benchmarks",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"EfficientDynamoDb"})," is built with performance and scalability in mind. Our main goals are:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reducing CPU cycles required to parse and serialize DynamoDB JSON."}),"\n",(0,t.jsx)(n.li,{children:"Reducing memory consumed by typical operations."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"raw-performance",children:"Raw Performance"}),"\n",(0,t.jsx)(n.p,{children:"Major design decisions that significantly improve performance:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Direct DynamoDB JSON conversion to C# objects without intermediate entities."}),"\n",(0,t.jsxs)(n.li,{children:["Custom low-level ",(0,t.jsx)(n.code,{children:"System.Text.Json"})," serializer and deserializer thoroughly tuned for DynamoDB syntax."]}),"\n",(0,t.jsx)(n.li,{children:"Using high-performance low-level C# features like spans, ref structs, stackallocs even for non-critical code paths."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ram-usage-and-gc-pressure",children:"RAM Usage and GC Pressure"}),"\n",(0,t.jsx)(n.p,{children:"Allocations are slow. GC collections are slow.\nWe mitigate both issues by keeping allocations count as low as possible."}),"\n",(0,t.jsx)(n.p,{children:"Preeminent solutions that help with memory pressure:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Excessive use of array pools for large arrays."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stackalloc"})," for small arrays when applicable."]}),"\n",(0,t.jsx)(n.li,{children:'Immutable fluent API is specifically designed to allocate only set properties instead of having a single "god object."'}),"\n",(0,t.jsx)(n.li,{children:"Not reading redundant info from DDB responses, e.g., repeated data types and attribute names."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,t.jsx)(n.p,{children:"Data must back every performance decision.\nBenchmarking is the only way to tell which solution is faster in a given context."}),"\n",(0,t.jsxs)(n.p,{children:["We use the superb ",(0,t.jsx)(n.a,{href:"https://github.com/dotnet/BenchmarkDotNet",children:"BenchmarkDotNet"})," to ensure that performance improves with every new version."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6672);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);