"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8906],{5404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6672);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},8723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dev_guide/high_level/attributes","title":"Attributes","description":"When using high-level API, data classes have to be marked with certain attributes to map the data to DynamoDB tables.","source":"@site/docs/dev_guide/high_level/attributes.md","sourceDirName":"dev_guide/high_level","slug":"/dev-guide/high-level/attributes","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/attributes","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/attributes.md","tags":[],"version":"current","frontMatter":{"id":"attributes","title":"Attributes","slug":"../../dev-guide/high-level/attributes"},"sidebar":"someSidebar","previous":{"title":"Retry Strategies","permalink":"/EfficientDynamoDb/docs/dev-guide/configuration/retry-strategies"},"next":{"title":"Reading Data","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/read"}}');var i=n(3420),s=n(5404);const o={id:"attributes",title:"Attributes",slug:"../../dev-guide/high-level/attributes"},a=void 0,d={},c=[{value:"DynamoDbTable",id:"dynamodbtable",level:2},{value:"DynamoDbProperty",id:"dynamodbproperty",level:2},{value:"Mapping primary key",id:"mapping-primary-key",level:3},{value:"Custom converters",id:"custom-converters",level:3},{value:"DynamoDbConverter",id:"dynamodbconverter",level:2},{value:"DynamoDbVersion",id:"dynamodbversion",level:2}];function l(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"When using high-level API, data classes have to be marked with certain attributes to map the data to DynamoDB tables."}),"\n",(0,i.jsx)(t.h2,{id:"dynamodbtable",children:"DynamoDbTable"}),"\n",(0,i.jsx)(t.p,{children:"Specifies a target table name."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Required:"})," false"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[DynamoDbTable("users")]\npublic class UserEntity { ... }\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If the same entity class needs to be stored in different tables, the table name can be overridden using the ",(0,i.jsx)(t.code,{children:"WithTableName"})," extension method."]}),"\n",(0,i.jsxs)(t.p,{children:["Note: ",(0,i.jsxs)(t.em,{children:[(0,i.jsx)(t.code,{children:"DynamoDbTable"})," supports inheritance, can be applied to the base class."]})]}),"\n",(0,i.jsx)(t.h2,{id:"dynamodbproperty",children:"DynamoDbProperty"}),"\n",(0,i.jsx)(t.p,{children:"Maps a property to the DynamoDB attribute."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Required:"})," true"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[DynamoDbProperty("first_name")]\npublic string FirstName { get; set; }\n'})}),"\n",(0,i.jsx)(t.h3,{id:"mapping-primary-key",children:"Mapping primary key"}),"\n",(0,i.jsxs)(t.p,{children:["Partition and sort key properties have to specify ",(0,i.jsx)(t.code,{children:"DynamoDbAttributeType"})," additionally:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[DynamoDbProperty("pk", DynamoDbAttributeType.PartitionKey)]\npublic string Pk { get; set; }\n\n[DynamoDbProperty("sk", DynamoDbAttributeType.SortKey)]\npublic string Sk { get; set; }\n'})}),"\n",(0,i.jsx)(t.h3,{id:"custom-converters",children:"Custom converters"}),"\n",(0,i.jsx)(t.p,{children:"An optional converter can also be specified per property. For more details describing how to create your own converters, check our Converters guide."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[DynamoDbProperty("gender", typeof(StringEnumDdbConverter<Gender>))]\npublic Gender Gender { get; set; }\n'})}),"\n",(0,i.jsx)(t.h2,{id:"dynamodbconverter",children:"DynamoDbConverter"}),"\n",(0,i.jsxs)(t.p,{children:["Associates class or struct with specified converter, thus removing the need to specify converter type in ",(0,i.jsx)(t.code,{children:"DynamoDbProperty"})," every single time."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"[DynamoDbConverter(typeof(CompositeAddressConverter))]\npublic class Address { ... }\n"})}),"\n",(0,i.jsx)(t.h2,{id:"dynamodbversion",children:"DynamoDbVersion"}),"\n",(0,i.jsxs)(t.p,{children:["Enables optimistic concurrency. Can only be applied to properties of ",(0,i.jsx)(t.code,{children:"byte?"}),", ",(0,i.jsx)(t.code,{children:"short?"}),", ",(0,i.jsx)(t.code,{children:"int?"})," and ",(0,i.jsx)(t.code,{children:"long?"})," types."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'[DynamoDbVersion, DynamoDbProperty("version"))]\npublic int? Version { get; set; }\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DynamoDbVersion"})," attribute is designed for backward compatibility with the official AWS .NET SDK.\nIt only works with ",(0,i.jsx)(t.code,{children:"SaveAsync"})," and ",(0,i.jsx)(t.code,{children:"DeleteAsync"})," extension methods and does not affect other operations."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);