"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={id:"read",title:"Reading Data",slug:"../dev-guide/high-level/read"},o=void 0,l={unversionedId:"dev_guide/high_level/read",id:"dev_guide/high_level/read",title:"Reading Data",description:"DynamoDB provides three main operations for reads:",source:"@site/docs/dev_guide/high_level/read.md",sourceDirName:"dev_guide/high_level",slug:"/dev_guide/dev-guide/high-level/read",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/read",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/read.md",tags:[],version:"current",frontMatter:{id:"read",title:"Reading Data",slug:"../dev-guide/high-level/read"},sidebar:"someSidebar",previous:{title:"Attributes",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes"},next:{title:"Writing Data",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/write"}},s={},p=[{value:"Retrieving an item",id:"retrieving-an-item",level:2},{value:"Querying data",id:"querying-data",level:2},{value:"Scanning data",id:"scanning-data",level:2},{value:"Parallel Scan",id:"parallel-scan",level:3},{value:"Document returns",id:"document-returns",level:2},{value:"Projections",id:"projections",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Useful links",id:"useful-links",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"DynamoDB provides three main operations for reads:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GetItem")," - Read a single item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Query")," - Get items from a single partition based on provided query expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Scan")," - Get all items from a table with a possibility to filter some of the results out.")),(0,i.kt)("p",null,"DynamoDB also supports a ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchGetItem")," operation for executing up to 100 ",(0,i.kt)("inlineCode",{parentName:"p"},"GetItem")," operations in a single request.\nIt's covered in ",(0,i.kt)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch"},"batch operations guide"),"."),(0,i.kt)("h2",{id:"retrieving-an-item"},"Retrieving an item"),(0,i.kt)("p",null,"To read an item from a DynamoDB table, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"GetItem")," operation.\nYou must provide a type marked by the ",(0,i.kt)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes#dynamodbtable"},"DynamoDbTable")," attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey");\n')),(0,i.kt)("p",null,"You must specify the ",(0,i.kt)("em",{parentName:"p"},"entire")," primary key, not just part of it.\nFor example, if a table has a composite primary key (partition key and sort key), you must supply a value for the partition key and a value for the sort key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey", "sortKey");\n')),(0,i.kt)("p",null,"You can use the fluent API when you need better control over the operation behavior."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItem<EntityClass>()\n    .WithConsistentRead(true)\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .ToItemAsync();\n')),(0,i.kt)("h2",{id:"querying-data"},"Querying data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," operation in Amazon DynamoDB finds items based on primary key values."),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," is a rather complicated operation, you can only use the fluent API to perform it.\nYou must provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"KeyExpression")," in every request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var condition = Condition<EntityClass>.On(x => x.Pk).EqualTo("test");\n\nvar items = await ddbContext.Query<EntityClass>()\n    .WithKeyExpression(condition)\n    .ToListAsync();\n')),(0,i.kt)("p",null,"DynamoDB can only return up to 1 MB of data per response.\nIf your query contains more, DynamoDB will paginate the response.\nIn this case, ",(0,i.kt)("inlineCode",{parentName:"p"},"ToListAsync()")," makes multiple calls until all the data is fetched and put into a single resulting array."),(0,i.kt)("p",null,"Check the ",(0,i.kt)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"condition building guide")," for detailed information about the condition builder API."),(0,i.kt)("h2",{id:"scanning-data"},"Scanning data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," operation iterates over the whole table and returns values that satisfy ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterExpression"),", if provided.\nThe Fluent API is the only option for high-level scanning."),(0,i.kt)("p",null,"Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"Query"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," API doesn't have a ",(0,i.kt)("inlineCode",{parentName:"p"},"ToListAsync()")," method to encourage better table design for your DB and correct scanning usage.\nThe closest replacement is ",(0,i.kt)("inlineCode",{parentName:"p"},"ToAsyncEnumerable()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var scan = ddbContext.Scan<EntityClass>();\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n")),(0,i.kt)("h3",{id:"parallel-scan"},"Parallel Scan"),(0,i.kt)("p",null,"DynamoDB supports parallel scans which are straightforward to use with EfficientDynamoDb.\nAll you need to do is decide the number of scanning segments and pass it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ToParallelAsyncEnumerable(...)")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var scan = ddbContext.Scan<EntityClass>();\nvar segmentsCount = 8;\n\nawait foreach (var item in scan.ToParallelAsyncEnumerable(segmentsCount))\n{\n    // Process an item here.\n}\n")),(0,i.kt)("h2",{id:"document-returns"},"Document returns"),(0,i.kt)("p",null,"Sometimes, your queries return different entities in a single response.\nThis frequently happens when using a single-table design."),(0,i.kt)("p",null,"The Fluent API allows you to return ",(0,i.kt)("inlineCode",{parentName:"p"},"Document")," objects instead of your entities which you can convert to correct entities in applications code.\nJust call the ",(0,i.kt)("inlineCode",{parentName:"p"},"AsDocument()")," (for ",(0,i.kt)("inlineCode",{parentName:"p"},"GetItem"),") or ",(0,i.kt)("inlineCode",{parentName:"p"},"AsDocuments()")," (for ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan"),") anywhere in the call chain before the executing method\n(e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ToItemAsync()")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"GetItem"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ToListAsync()")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Query"),", etc.)"),(0,i.kt)("p",null,"For example, consider the case when a single query returns the user's profile data and a list of his transactions."),(0,i.kt)("p",null,"Retrieving documents using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var condition = Condition<EntityClass>.On(x => x.Pk).EqualTo("test");\n\nvar documents = await ddbContext.Query<EntityClass>()\n    .WithKeyExpression(condition)\n    .AsDocuments()\n    .ToListAsync();\n')),(0,i.kt)("p",null,"Mapping documents to entities can be done by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"Document.ToObject<T>()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// sort key prefix determines the \'type\' of item\nvar userInfoDocument = documents.First(x => x["sortKey"].StartsWith("userInfo#"));\n\n// convert Document to entity class\nvar userInfo = ddbContext.ToObject<UserInfo>(userInfoDocument); \n\n// assuming that all other items except user info are transactions\nvar transactions = documents.Except(userInfoDocument) \n    .Select(x => ddbContext.ToObject<UserTransaction>(x))\n    .ToList();\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GetItem")," document example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .AsDocument()\n    .ToItemAsync();\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var scan = ddbContext.Scan<EntityClass>().AsDocuments();\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n")),(0,i.kt)("h2",{id:"projections"},"Projections"),(0,i.kt)("p",null,"Use projections to retrieve only specific attributes of item(s).\nAll read operations support projection using the same API."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AsProjection<TProjection>()")," method to get a projection to the specified class."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Projected class and its properties must be marked with corresponding attributes in the same way as entities are marked!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var projectedItem = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .AsProjection<ProjectionClass>()\n    .ToItemAsync()\n')),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithProjectedAttributes(...)")," method if you don't want to create a separate projection class.\nWhen this method is used, the response will keep the original entity class but pull and populate only specified attributes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Passing the same property multiple times is not allowed!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItem<EntityClass>()\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .WithProjectedAttributes(x => x.FirstName, x => x.LastName)\n    .ToItemAsync()\n')),(0,i.kt)("h2",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," have two ways of handling paginated requests.\nAPIs for both operations are the same, so that the following examples will show only ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," for the sake of simplicity."),(0,i.kt)("p",null,"The easiest way to handle a paginated request manually is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"ToAsyncEnumerable()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"await foreach (var item in query.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n")),(0,i.kt)("p",null,"There are also cases when you might need to manage pagination tokens yourself.\nTo do so, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ToPageAsync()")," to get the pagination token in response and then pass it to the subsequent request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var page = await query.ToPageAsync();\n\nvar nextPage = await query.WithPaginationToken(page.PaginationToken)\n    .ToPageAsync();\n")),(0,i.kt)("p",null,"Note: ",(0,i.kt)("em",{parentName:"p"},"Due to the internals of the DynamoDB, ",(0,i.kt)("inlineCode",{parentName:"em"},"page.Items")," being empty doesn't mean that there are no more data to read."),"\n",(0,i.kt)("em",{parentName:"p"},"The only way to know that all data is retrieved is by checking the ",(0,i.kt)("inlineCode",{parentName:"em"},"page.PaginationToken")," value. It is ",(0,i.kt)("inlineCode",{parentName:"em"},"null")," when there are no more items to pull"),"."),(0,i.kt)("h2",{id:"filtering"},"Filtering"),(0,i.kt)("p",null,"DynamoDB supports filtering results returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," by providing a ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterExpression")," in requests.\nEfficientDynamoDb provides the same API for specifying filters for both operations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var condition = Condition<EntityClass>.On(x => x.FirstName).EqualTo("John");\n\nvar scan = ddbContext.Scan<EntityClass>()\n    .WithFilterExpression(condition);\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n')),(0,i.kt)("p",null,"Keep in mind that filtering doesn't reduce your RCU consumption, but it reduces transferred data size, thus reducing latency and network usage."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"Conditions builder API")," for filter expressions is the same API used for key expressions."),(0,i.kt)("h2",{id:"useful-links"},"Useful links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API references",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/get-item"},"GetItem")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/query"},"Query")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/api-reference/scan"},"Scan")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},"Condition Builder guide"))))}c.isMDXComponent=!0}}]);