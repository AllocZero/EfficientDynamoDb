"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7941],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,b=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"attributes",title:"Attributes",slug:"../dev-guide/high-level/attributes"},o=void 0,l={unversionedId:"dev_guide/high_level/attributes",id:"dev_guide/high_level/attributes",title:"Attributes",description:"When using high-level API, data classes have to be marked with certain attributes to map the data to DynamoDB tables.",source:"@site/docs/dev_guide/high_level/attributes.md",sourceDirName:"dev_guide/high_level",slug:"/dev_guide/dev-guide/high-level/attributes",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/attributes.md",tags:[],version:"current",frontMatter:{id:"attributes",title:"Attributes",slug:"../dev-guide/high-level/attributes"},sidebar:"someSidebar",previous:{title:"Retry Strategies",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/configuration/retry-strategies"},next:{title:"Reading Data",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/read"}},s={},p=[{value:"DynamoDbTable",id:"dynamodbtable",level:2},{value:"DynamoDbProperty",id:"dynamodbproperty",level:2},{value:"Mapping primary key",id:"mapping-primary-key",level:3},{value:"Custom converters",id:"custom-converters",level:3},{value:"DynamoDbConverter",id:"dynamodbconverter",level:2},{value:"DynamoDbVersion",id:"dynamodbversion",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When using high-level API, data classes have to be marked with certain attributes to map the data to DynamoDB tables."),(0,a.kt)("h2",{id:"dynamodbtable"},"DynamoDbTable"),(0,a.kt)("p",null,"Specifies a target table name."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Required:")," false"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbTable("users")]\npublic class UserEntity { ... }\n')),(0,a.kt)("p",null,"If the same entity class needs to be stored in different tables, the table name can be overridden using the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithTableName")," extension method."),(0,a.kt)("p",null,"Note: ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"em"},"DynamoDbTable")," supports inheritance, can be applied to the base class.")),(0,a.kt)("h2",{id:"dynamodbproperty"},"DynamoDbProperty"),(0,a.kt)("p",null,"Maps a property to the DynamoDB attribute."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Required:")," true"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbProperty("first_name")]\npublic string FirstName { get; set; }\n')),(0,a.kt)("h3",{id:"mapping-primary-key"},"Mapping primary key"),(0,a.kt)("p",null,"Partition and sort key properties have to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"DynamoDbAttributeType")," additionally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbProperty("pk", DynamoDbAttributeType.PartitionKey)]\npublic string Pk { get; set; }\n\n[DynamoDbProperty("sk", DynamoDbAttributeType.SortKey)]\npublic string Sk { get; set; }\n')),(0,a.kt)("h3",{id:"custom-converters"},"Custom converters"),(0,a.kt)("p",null,"An optional converter can also be specified per property. For more details describing how to create your own converters, check our Converters guide."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbProperty("gender", typeof(StringEnumDdbConverter<Gender>))]\npublic Gender Gender { get; set; }\n')),(0,a.kt)("h2",{id:"dynamodbconverter"},"DynamoDbConverter"),(0,a.kt)("p",null,"Associates class or struct with specified converter, thus removing the need to specify converter type in ",(0,a.kt)("inlineCode",{parentName:"p"},"DynamoDbProperty")," every single time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"[DynamoDbConverter(typeof(CompositeAddressConverter))]\npublic class Address { ... }\n")),(0,a.kt)("h2",{id:"dynamodbversion"},"DynamoDbVersion"),(0,a.kt)("p",null,"Enables optimistic concurrency. Can only be applied to properties of ",(0,a.kt)("inlineCode",{parentName:"p"},"byte?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"short?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"int?")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"long?")," types."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[DynamoDbVersion, DynamoDbProperty("version"))]\npublic int? Version { get; set; }\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DynamoDbVersion")," attribute is designed for backward compatibility with the official AWS .NET SDK.\nIt only works with ",(0,a.kt)("inlineCode",{parentName:"p"},"SaveAsync")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteAsync")," extension methods and does not affect other operations."))}u.isMDXComponent=!0}}]);