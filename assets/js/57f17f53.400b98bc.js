"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1270],{744:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/EfficientDynamoDb/blog/welcome","editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/blog/blog/2021-03-30-welcome.md","source":"@site/blog/2021-03-30-welcome.md","title":"Welcome","description":"We\'re thrilled to announce our first publicly available Release Candidate version of EfficientDynamoDb.","date":"2021-03-30T00:00:00.000Z","formattedDate":"March 30, 2021","tags":[{"label":"dynamodb","permalink":"/EfficientDynamoDb/blog/tags/dynamodb"},{"label":"dotnet","permalink":"/EfficientDynamoDb/blog/tags/dotnet"},{"label":"c#","permalink":"/EfficientDynamoDb/blog/tags/c"},{"label":"aws","permalink":"/EfficientDynamoDb/blog/tags/aws"}],"readingTime":1.095,"hasTruncateMarker":false,"authors":[{"name":"Mykhailo Matviiv","url":"https://github.com/firenero","imageURL":"https://avatars.githubusercontent.com/u/9461703?s=400&u=a677c383395a1debb6ae6fe1a50d6b039b28f203&v=4"}],"frontMatter":{"slug":"welcome","title":"Welcome","author":"Mykhailo Matviiv","author_url":"https://github.com/firenero","author_image_url":"https://avatars.githubusercontent.com/u/9461703?s=400&u=a677c383395a1debb6ae6fe1a50d6b039b28f203&v=4","tags":["dynamodb","dotnet","c#","aws"]}},"content":"We\'re thrilled to announce our first publicly available Release Candidate version of [EfficientDynamoDb](https://github.com/AllocZero/EfficientDynamoDb).\\n\\nIt aims to simplify major pain points of interacting with DynamoDB in C# that we faced in more than 4 years working with it:\\n\\n1. Unreasonably slow response processing. In some cases, parsing the result is slower than DynamoDB latency.\\n1. Expressions syntax (query, update, etc.) is not suitable for C# tooling. Using strings for expressions is highly error-prone, hides usages, makes refactoring challenging, and has no validation whatsoever.\\n1. Missing high-level APIs for transactions, batches, updates.\\n1. Poor out-of-the-box data types support (especially collections) and limited extensibility.\\n\\nWe\'ve put dozens of hours optimizing hot paths in our library to ensure that every single benchmark outperforms competitors. In some popular scenarios, EfficientDynamoDb can be up to 21x times faster and allocate 26x times less memory.\\n\\nIt\'s possible to build DDB expressions entirely in C# without using clumsy DDB expressions syntax and plain strings. Complicated operations like transactions, batches, updates, and parallel scans are easy to use via high-level API.\\n\\nWe have many ideas moving forward, like integrating composite keys, smart retry policies, supporting get-only properties, and so on. We\'d love to hear the feedback from the community, so feel free to create an issue on [GitHub](https://github.com/AllocZero/EfficientDynamoDb) or post your questions and suggestions here in the comments."}]}')}}]);