"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5535],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"update-expression",title:"Building Update Expressions",slug:"../../dev-guide/high-level/update-expression"},i=void 0,s={unversionedId:"dev_guide/high_level/update-expression",id:"dev_guide/high_level/update-expression",title:"Building Update Expressions",description:"This guide focuses on EfficientDynamoDb's API for building update expressions.",source:"@site/docs/dev_guide/high_level/update-expression.md",sourceDirName:"dev_guide/high_level",slug:"/dev-guide/high-level/update-expression",permalink:"/EfficientDynamoDb/docs/dev-guide/high-level/update-expression",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/update-expression.md",tags:[],version:"current",frontMatter:{id:"update-expression",title:"Building Update Expressions",slug:"../../dev-guide/high-level/update-expression"},sidebar:"someSidebar",previous:{title:"Building Conditions",permalink:"/EfficientDynamoDb/docs/dev-guide/high-level/conditions"},next:{title:"Low-Level API",permalink:"/EfficientDynamoDb/docs/dev-guide/low-level"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Using values from another attribute",id:"using-values-from-another-attribute",level:3},{value:"Arithmetic operations",id:"arithmetic-operations",level:2},{value:"Collection operations",id:"collection-operations",level:2},{value:"Removing from collections",id:"removing-from-collections",level:3},{value:"Removing a property",id:"removing-a-property",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide focuses on EfficientDynamoDb's API for building update expressions.\nIt's assumed that you are already familiar with update expressions in DynamoDb.\nIf not, please check out ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html"},"official AWS docs")," for a better understanding of topics covered in this section."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Much like condition expressions builder API, update expressions API in EfficientDynamoDb makes it easy to perform complex updates.\nYou don't need to think about reserved words, attribute name escaping, and other low-level DynamoDB stuff."),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"You can build update expressions as part of an ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItem")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.FirstName).Assign("John")\n    .ExecuteAsync();\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"On(...)")," accepts an expression that should point to a property marked by ",(0,r.kt)("inlineCode",{parentName:"p"},"DynamoDbProperty")," attribute, element inside the collection, or the nested property of another object."),(0,r.kt)("h3",{id:"using-values-from-another-attribute"},"Using values from another attribute"),(0,r.kt)("p",null,"You can use another attribute in the update operation instead of an explicit value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.LastName).Assign(x => x.FirstName)\n    .ExecuteAsync();\n")),(0,r.kt)("p",null,"Such overloads also allow providing a fallback value that will be used when an attribute doesn't exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.LastName).Assign(x => x.FirstName, "Fallback Name")\n    .ExecuteAsync();\n')),(0,r.kt)("h2",{id:"arithmetic-operations"},"Arithmetic operations"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AssignSum")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AssignSubtraction")," methods to increment or decrement attributes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Age).AssignSum(x => x.Age, 1) // increment age\n    .On(x => x.CacheTtl).AssignSubtraction(x => x.CacheTtl, 10) // reduce cache TTL by 10 (seconds)\n    .ExecuteAsync();\n")),(0,r.kt)("p",null,"It's possible to assign a sum of two attributes to the third one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Age).AssignSum(x => x.FirstProperty, x => x.SecondProperty)\n    .ExecuteAsync();\n")),(0,r.kt)("p",null,"Every expression may have a fallback value to handle the case when an attribute doesn't exist."),(0,r.kt)("h2",{id:"collection-operations"},"Collection operations"),(0,r.kt)("p",null,"The main operation to concatenate collections is ",(0,r.kt)("inlineCode",{parentName:"p"},"AssignConcat(...)"),".\nIt can be used for any possible concatenation scenario, but there are also ",(0,r.kt)("inlineCode",{parentName:"p"},"Append(...)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Prepend(...)")," methods to simplify modifying the collection in-place."),(0,r.kt)("p",null,"Appending example. Both calls are doing the same thing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).AssignConcat(x => x.Friends, new [] {"New friend"})\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).Append(new [] {"New friend"})\n    .ExecuteAsync();\n')),(0,r.kt)("p",null,"Prepending example. Both calls are doing the same thing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).AssignConcat(new [] {"New friend"}, x => x.Friends)\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).Prepend(new [] {"New friend"})\n    .ExecuteAsync();\n')),(0,r.kt)("p",null,"To update ",(0,r.kt)("inlineCode",{parentName:"p"},"SET"),"-like collections, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Insert(...)")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.UniqueValues).Insert(newUniqueValue)\n    .ExecuteAsync();\n")),(0,r.kt)("h3",{id:"removing-from-collections"},"Removing from collections"),(0,r.kt)("p",null,"Removing an element from a list can be done by index:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends[2]).Remove()\n    .ExecuteAsync();\n")),(0,r.kt)("p",null,"To remove elements from the set, you need to pass a subset to remove:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.UniqueValues).Remove(new HashSet<int>() {1, 2, 3})\n    .ExecuteAsync();\n")),(0,r.kt)("h2",{id:"removing-a-property"},"Removing a property"),(0,r.kt)("p",null,"You can remove any top-level property, nested property, or a list member by calling the parameterless ",(0,r.kt)("inlineCode",{parentName:"p"},"Remove()")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.SomeProperty).Remove()\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Array[3]).Remove()\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.TopLvl.Nested).Remove()\n    .ExecuteAsync();\n")))}u.isMDXComponent=!0}}]);