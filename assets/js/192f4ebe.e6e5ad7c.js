"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4667],{5253:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api_reference/builders/get-item-builder","title":"GetItem Request Builder","description":"Overview","source":"@site/docs/api_reference/builders/get-item-builder.md","sourceDirName":"api_reference/builders","slug":"/api-reference/builders/get-item","permalink":"/EfficientDynamoDb/docs/api-reference/builders/get-item","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/api_reference/builders/get-item-builder.md","tags":[],"version":"current","frontMatter":{"id":"get-item-builder","title":"GetItem Request Builder","sidebar_label":"GetItem","slug":"../../api-reference/builders/get-item"},"sidebar":"someSidebar","previous":{"title":"Request Builders","permalink":"/EfficientDynamoDb/docs/api-reference/builders"},"next":{"title":"PutItem","permalink":"/EfficientDynamoDb/docs/api-reference/builders/put-item"}}');var r=i(3420),s=i(5404);const a={id:"get-item-builder",title:"GetItem Request Builder",sidebar_label:"GetItem",slug:"../../api-reference/builders/get-item"},l=void 0,o={},c=[{value:"Overview",id:"overview",level:2},{value:"GetItem Configuration",id:"getitem-configuration",level:2},{value:"WithPrimaryKey (with only Partition key)",id:"withprimarykey-pk",level:3},{value:"Parameters",id:"withprimarykey-pk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-example",level:4},{value:"WithPrimaryKey (with both Partition and Sort keys)",id:"withprimarykey-pk-sk",level:3},{value:"Parameters",id:"withprimarykey-pk-sk-parameters",level:4},{value:"Example",id:"withprimarykey-pk-sk-example",level:4},{value:"WithConsistentRead",id:"withconsistentread",level:3},{value:"Parameters",id:"withconsistentread-parameters",level:4},{value:"Example",id:"withconsistentread-example",level:4},{value:"ReturnConsumedCapacity",id:"returnconsumedcapacity",level:3},{value:"Parameters",id:"returnconsumedcapacity-parameters",level:4},{value:"Example",id:"returnconsumedcapacity-example",level:4},{value:"AsProjection (With Type)",id:"asprojection-type",level:3},{value:"Example",id:"asprojection-type-example",level:4},{value:"AsProjection (With Attributes)",id:"asprojection-type-attributes",level:3},{value:"Parameters",id:"asprojection-type-attributes-parameters",level:4},{value:"Example",id:"asprojection-type-attributes-example",level:4},{value:"WithProjectedAttributes",id:"withprojectedattributes",level:3},{value:"Parameters",id:"withprojectedattributes-parameters",level:4},{value:"Example",id:"withprojectedattributes-example",level:4},{value:"AsDocument",id:"asdocument",level:3},{value:"Example",id:"asdocument-example",level:4},{value:"GetItem Execution",id:"getitem-execution",level:2},{value:"ToItemAsync",id:"toitem",level:3},{value:"Parameters",id:"toitem-parameters",level:4},{value:"Example",id:"toitem-example",level:4},{value:"ToResponseAsync",id:"toresponse",level:3},{value:"Example",id:"toresponse-example",level:4}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["This section describes the EfficientDynamoDb API for building the ",(0,r.jsx)(t.code,{children:"GetItem"})," request."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"IGetItemEntityRequestBuilder<TEntity>"})," interface provides a builder pattern for constructing a ",(0,r.jsx)(t.code,{children:"GetItem"})," operation in DynamoDB.\nIt is designed to work with a database entity of type ",(0,r.jsx)(t.code,{children:"TEntity"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"DynamoDbContext.GetItem<TEntity>()"})," method to get the builder:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var builder = ddbContext.GetItem<EntityClass>();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["For the ",(0,r.jsx)(t.code,{children:"GetItem"})," request you only required to specify primary key using the ",(0,r.jsx)(t.code,{children:"WithPrimaryKey"})," method.\nAll other builder methods are optional and can be omitted.\nIn this case, DynamoDB will use the default behavior."]}),"\n",(0,r.jsx)(t.h2,{id:"getitem-configuration",children:"GetItem Configuration"}),"\n",(0,r.jsx)(t.h3,{id:"withprimarykey-pk",children:"WithPrimaryKey (with only Partition key)"}),"\n",(0,r.jsx)(t.p,{children:"Specifies the partition key of the item to get."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity> WithPrimaryKey<TPk>(TPk pk);\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"It is required to specify the primary key for every GetItem request."})}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["Use this method if the table has only a partition key. If the table has both partition and sort keys, use ",(0,r.jsx)(t.a,{href:"#withprimarykey-pk-sk",children:(0,r.jsx)(t.code,{children:"WithPrimaryKey<TPk, TSk>"})})," instead."]})}),"\n",(0,r.jsx)(t.h4,{id:"withprimarykey-pk-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"pk"}),": The partition key of the item."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"withprimarykey-pk-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'builder = builder.WithPrimaryKey("partitionKey");\n'})}),"\n",(0,r.jsx)(t.h3,{id:"withprimarykey-pk-sk",children:"WithPrimaryKey (with both Partition and Sort keys)"}),"\n",(0,r.jsx)(t.p,{children:"Specifies the partition and sort keys of the item to get."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity> WithPrimaryKey<TPk, TSk>(TPk pk, TSk sk);\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"It is required to specify the primary key for every GetItem request."})}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["Use this method only if the table has both partition and sort keys.\nIf the table only has a partition key, use ",(0,r.jsx)(t.a,{href:"#withprimarykey-pk",children:(0,r.jsx)(t.code,{children:"WithPrimaryKey<TPk>"})})," instead."]})}),"\n",(0,r.jsx)(t.h4,{id:"withprimarykey-pk-sk-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"pk"}),": The partition key of the item."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sk"}),": The sort key of the item."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"withprimarykey-pk-sk-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'builder = builder.WithPrimaryKey("partitionKey", "sortKey");\n'})}),"\n",(0,r.jsx)(t.h3,{id:"withconsistentread",children:"WithConsistentRead"}),"\n",(0,r.jsx)(t.p,{children:"Specifies whether to use a consistent read in the GetItem operation."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity> WithConsistentRead(bool useConsistentRead);\n"})}),"\n",(0,r.jsx)(t.p,{children:"If not specified, DynamoDB will use eventually consistent read."}),"\n",(0,r.jsx)(t.h4,{id:"withconsistentread-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"useConsistentRead"}),": Set this to ",(0,r.jsx)(t.code,{children:"true"})," if you want a consistent read.\nOtherwise, set it to ",(0,r.jsx)(t.code,{children:"false"}),".\nSetting it to ",(0,r.jsx)(t.code,{children:"false"})," is equivalent to not using the ",(0,r.jsx)(t.code,{children:"WithConsistentRead()"})," method at all."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"withconsistentread-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"builder = builder.WithConsistentRead(true);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"returnconsumedcapacity",children:"ReturnConsumedCapacity"}),"\n",(0,r.jsx)(t.p,{children:"Specifies the consumed capacity details to include in the response."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity> ReturnConsumedCapacity(ReturnConsumedCapacity consumedCapacityMode);\n"})}),"\n",(0,r.jsx)(t.p,{children:"If not specified, no consumed capacity info is returned in the response."}),"\n",(0,r.jsx)(t.h4,{id:"returnconsumedcapacity-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"consumedCapacityMode"}),": The type of consumed capacity information to return.\nSetting it to ",(0,r.jsx)(t.code,{children:"ReturnConsumedCapacity.None"})," is equivalent to not using the ",(0,r.jsx)(t.code,{children:"ReturnConsumedCapacity()"})," method at all."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"returnconsumedcapacity-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"builder = builder.ReturnConsumedCapacity(ReturnConsumedCapacity.Total);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"asprojection-type",children:"AsProjection (With Type)"}),"\n",(0,r.jsxs)(t.p,{children:["Projects the retrieved item to the specified type.\nOnly properties present in ",(0,r.jsx)(t.code,{children:"TProjection"})," will be retrieved."]}),"\n",(0,r.jsxs)(t.p,{children:["This method returns a different type of the builder to preserve the projection type.\nIn case of chained calls and/or using ",(0,r.jsx)(t.code,{children:"var"})," to save builder to a variable, the change of returned type may be unnoticeable.\nThis is by design and you should be able to mix regular and projected builders."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity, TProjection> AsProjection<TProjection>() where TProjection : class;\n"})}),"\n",(0,r.jsx)(t.h4,{id:"asprojection-type-example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Since the change of returned builder type, it can't be assigned to the same variable."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var projectedBuilder = builder.AsProjection<ProjectedEntity>();\n"})}),"\n",(0,r.jsx)(t.h3,{id:"asprojection-type-attributes",children:"AsProjection (With Attributes)"}),"\n",(0,r.jsxs)(t.p,{children:["Projects the retrieved item to the specified type, but only retrieves the properties specified in ",(0,r.jsx)(t.code,{children:"properties"})," parameter.\nOther properties will have default values."]}),"\n",(0,r.jsxs)(t.p,{children:["Similarly to ",(0,r.jsx)(t.a,{href:"#asprojection-type",children:(0,r.jsx)(t.code,{children:"AsProjection<TProjection>()"})}),", this method returns a different type of the builder to preserve the projection type with all the previously explained consequences."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity, TProjection> AsProjection<TProjection>(params Expression<Func<TProjection, object>>[] properties) where TProjection : class;\n"})}),"\n",(0,r.jsx)(t.h4,{id:"asprojection-type-attributes-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"properties"}),": The attributes to project."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"asprojection-type-attributes-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var projectedBuilder = builder.AsProjection<ProjectedEntity>(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After execution, this ",(0,r.jsx)(t.code,{children:"GetItem"})," request will return instance of ",(0,r.jsx)(t.code,{children:"ProjectedEntity"})," with only ",(0,r.jsx)(t.code,{children:"SomeProperty"})," and ",(0,r.jsx)(t.code,{children:"AnotherProperty"})," set.\nAll other properties will have default values."]}),"\n",(0,r.jsx)(t.h3,{id:"withprojectedattributes",children:"WithProjectedAttributes"}),"\n",(0,r.jsxs)(t.p,{children:["Specifies the attributes to project in the retrieved item.\nOnly properties specified in ",(0,r.jsx)(t.code,{children:"properties"})," will be retrieved. Other properties will have default values."]}),"\n",(0,r.jsxs)(t.p,{children:["Contrary to ",(0,r.jsx)(t.code,{children:"AsProjection"})," methods, ",(0,r.jsx)(t.code,{children:"WithProjectedAttributes"})," doesn't change the type of returned entity and builder."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemEntityRequestBuilder<TEntity> WithProjectedAttributes(params Expression<Func<TEntity, object>>[] properties);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"withprojectedattributes-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"properties"}),": The attributes to project."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"withprojectedattributes-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"builder = builder.WithProjectedAttributes(\n    x => x.SomeProperty,\n    x => x.AnotherProperty\n);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After execution, this ",(0,r.jsx)(t.code,{children:"GetItem"})," request will return the original entity of the builder (in this example it's ",(0,r.jsx)(t.code,{children:"EntityClass"}),") with only ",(0,r.jsx)(t.code,{children:"SomeProperty"})," and ",(0,r.jsx)(t.code,{children:"AnotherProperty"})," set.\nAll other properties will have default values."]}),"\n",(0,r.jsx)(t.h3,{id:"asdocument",children:"AsDocument"}),"\n",(0,r.jsxs)(t.p,{children:["Represents the returned item as a ",(0,r.jsx)(t.code,{children:"Document"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Similarly to ",(0,r.jsx)(t.a,{href:"#asprojection-type",children:(0,r.jsx)(t.code,{children:"AsProjection<TProjection>()"})}),", this operation returns different type of builder with all the previously explained consequences."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IGetItemDocumentRequestBuilder<TEntity> AsDocument();\n"})}),"\n",(0,r.jsx)(t.h4,{id:"asdocument-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var documentBuilder = builder.AsDocument();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After execution, this ",(0,r.jsx)(t.code,{children:"GetItem"})," request will return the ",(0,r.jsx)(t.code,{children:"Document"})," instead of the original entity of the builder."]}),"\n",(0,r.jsx)(t.h2,{id:"getitem-execution",children:"GetItem Execution"}),"\n",(0,r.jsx)(t.p,{children:"There are 3 versions of every GetItem execution method: regular, projected, and document.\nAll versions have same parameters, the only difference is entity type returned value:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["In most cases, the original entity ",(0,r.jsx)(t.code,{children:"TEntity"})," is returned."]}),"\n",(0,r.jsxs)(t.li,{children:["If ",(0,r.jsx)(t.code,{children:"AsProjection<TProjection>()"})," was used during the configuration, the execution method will contain the entity type of ",(0,r.jsx)(t.code,{children:"TProjection"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["If ",(0,r.jsx)(t.code,{children:"AsDocument()"})," was used, the execution method will contain the entity type of ",(0,r.jsx)(t.code,{children:"Document"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In all cases, the result will be ",(0,r.jsx)(t.code,{children:"null"})," if the item does not exist."]}),"\n",(0,r.jsx)(t.p,{children:"For simplicity, this document covers only regular version of execution methods."}),"\n",(0,r.jsx)(t.h3,{id:"toitem",children:"ToItemAsync"}),"\n",(0,r.jsx)(t.p,{children:"Executes the GetItem operation asynchronously and returns the item."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"Task<TEntity?> ToItemAsync(CancellationToken cancellationToken = default);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"toitem-parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"cancellationToken"}),": Token that can be used to cancel the task."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"toitem-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var item = await builder.ToItemAsync();\n"})}),"\n",(0,r.jsx)(t.h3,{id:"toresponse",children:"ToResponseAsync"}),"\n",(0,r.jsxs)(t.p,{children:["Executes the GetItem operation asynchronously and returns the deserialized response.\nBesides the item, this response contains ",(0,r.jsx)(t.code,{children:"ConsumedCapacity"})," property if ",(0,r.jsx)(t.a,{href:"#returnconsumedcapacity",children:(0,r.jsx)(t.code,{children:"ReturnConsumedCapacity"})})," was used."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"Task<GetItemEntityResponse<TEntity>> ToResponseAsync(CancellationToken cancellationToken = default);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"toresponse-example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"var response = await builder.ToResponseAsync();\nvar item = response.Item;\nvar consumedCapacity = response.ConsumedCapacity;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5404:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(6672);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);