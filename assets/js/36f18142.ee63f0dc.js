"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5038],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={id:"design",title:"Design Principles",sidebar_label:"Design Principles",slug:"../design"},o=void 0,l={unversionedId:"efficient_dynamo_db/design",id:"efficient_dynamo_db/design",title:"Design Principles",description:"EfficientDynamoDb is built with performance and scalability in mind. Our main goals are:",source:"@site/docs/efficient_dynamo_db/design.md",sourceDirName:"efficient_dynamo_db",slug:"/design",permalink:"/EfficientDynamoDb/docs/design",draft:!1,editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/efficient_dynamo_db/design.md",tags:[],version:"current",frontMatter:{id:"design",title:"Design Principles",sidebar_label:"Design Principles",slug:"../design"},sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/EfficientDynamoDb/docs/"},next:{title:"Getting started",permalink:"/EfficientDynamoDb/docs/dev-guide/getting-started"}},s={},c=[{value:"Raw Performance",id:"raw-performance",level:2},{value:"RAM Usage and GC Pressure",id:"ram-usage-and-gc-pressure",level:2},{value:"Benchmarks",id:"benchmarks",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"EfficientDynamoDb")," is built with performance and scalability in mind. Our main goals are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reducing CPU cycles required to parse and serialize DynamoDB JSON."),(0,i.kt)("li",{parentName:"ul"},"Reducing memory consumed by typical operations.")),(0,i.kt)("h2",{id:"raw-performance"},"Raw Performance"),(0,i.kt)("p",null,"Major design decisions that significantly improve performance:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Direct DynamoDB JSON conversion to C# objects without intermediate entities."),(0,i.kt)("li",{parentName:"ol"},"Custom low-level ",(0,i.kt)("inlineCode",{parentName:"li"},"System.Text.Json")," serializer and deserializer thoroughly tuned for DynamoDB syntax."),(0,i.kt)("li",{parentName:"ol"},"Using high-performance low-level C# features like spans, ref structs, stackallocs even for non-critical code paths.")),(0,i.kt)("h2",{id:"ram-usage-and-gc-pressure"},"RAM Usage and GC Pressure"),(0,i.kt)("p",null,"Allocations are slow. GC collections are slow.\nWe mitigate both issues by keeping allocations count as low as possible."),(0,i.kt)("p",null,"Preeminent solutions that help with memory pressure:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Excessive use of array pools for large arrays."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"stackalloc")," for small arrays when applicable."),(0,i.kt)("li",{parentName:"ol"},'Immutable fluent API is specifically designed to allocate only set properties instead of having a single "god object."'),(0,i.kt)("li",{parentName:"ol"},"Not reading redundant info from DDB responses, e.g., repeated data types and attribute names.")),(0,i.kt)("h2",{id:"benchmarks"},"Benchmarks"),(0,i.kt)("p",null,"Data must back every performance decision.\nBenchmarking is the only way to tell which solution is faster in a given context."),(0,i.kt)("p",null,"We use the superb ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dotnet/BenchmarkDotNet"},"BenchmarkDotNet")," to ensure that performance improves with every new version."))}m.isMDXComponent=!0}}]);