"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2698],{5404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6672);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},7987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"dev_guide/high_level/transact","title":"Transactions","description":"DynamoDB provides two transactional operations:","source":"@site/docs/dev_guide/high_level/transact.md","sourceDirName":"dev_guide/high_level","slug":"/dev-guide/high-level/transact","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/transact","draft":false,"unlisted":false,"editUrl":"https://github.com/alloczero/EfficientDynamoDb/edit/main/website/docs/dev_guide/high_level/transact.md","tags":[],"version":"current","frontMatter":{"id":"transact","title":"Transactions","slug":"../../dev-guide/high-level/transact"},"sidebar":"someSidebar","previous":{"title":"Batch Operations","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/batch"},"next":{"title":"Converters","permalink":"/EfficientDynamoDb/docs/dev-guide/high-level/converters"}}');var s=n(3420),a=n(5404);const r={id:"transact",title:"Transactions",slug:"../../dev-guide/high-level/transact"},o=void 0,c={},l=[{value:"TransactGetItems",id:"transactgetitems",level:2},{value:"TransactWriteItems",id:"transactwriteitems",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"DynamoDB provides two transactional operations:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TransactGetItems"})," - Atomically read multiple items from one or more tables."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TransactWriteItems"})," -  Atomically modify multiple items in one or more tables."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Both operations throw ",(0,s.jsx)(t.code,{children:"TransactionCanceledException"})," when transaction is rejected.\nThe ",(0,s.jsx)(t.code,{children:"CancellationReasons"})," property can be used to find out the reason behind the rejection."]}),"\n",(0,s.jsx)(t.h2,{id:"transactgetitems",children:"TransactGetItems"}),"\n",(0,s.jsx)(t.p,{children:"Atomically retrieves up to 25 items from one or more tables within the same AWS account and Region."}),"\n",(0,s.jsxs)(t.p,{children:["Each entity primary key is configured using ",(0,s.jsx)(t.code,{children:"Transact.GetItem"})," factory method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'var items = await context.TransactGet()\n    .WithItems(\n        Transact.GetItem<EntityClass>().WithPrimaryKey("partitionKey", "sortKey_1"),\n        Transact.GetItem<EntityClass>().WithPrimaryKey("partitionKey", "sortKey_2")\n    )\n    .ToListAsync<MixedEntity>()\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["Entities of different type can be retrieved by using ",(0,s.jsx)(t.code,{children:"AsDocuments()"})," method the same way as for other read operations."]})}),"\n",(0,s.jsx)(t.h2,{id:"transactwriteitems",children:"TransactWriteItems"}),"\n",(0,s.jsx)(t.p,{children:"Atomically applies one of four operations per item within the same AWS account and Region (up to 25 operations):"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Transact.PutItem"})," - applies a ",(0,s.jsx)(t.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/write#putitem",children:"PutItem"})," operation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Transact.UpdateItem"})," - applies an ",(0,s.jsx)(t.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/write#updateitem",children:"UpdateItem"})," operation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Transact.DeleteItem"})," - applies a ",(0,s.jsx)(t.a,{href:"/EfficientDynamoDb/docs/dev-guide/high-level/write#deleteitem",children:"DeleteItem"})," operation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Transact.ConditionCheck"})," - applies a condition to an item which is not modified by the transaction."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'await context.TransactWrite()\n    .WithClientRequestToken(idempotencyKey)\n    .WithItems(\n        Transact.PutItem(new UserEmailEntity("test@test.com")),\n        Transact.ConditionCheck<UserEntity>()\n            .WithPrimaryKey("partitionKey", "sortKey")\n            .WithCondition(Condition<UserEntity>.On(x => x.Verified).EqualTo(false))\n    )\n    .ExecuteAsync();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);