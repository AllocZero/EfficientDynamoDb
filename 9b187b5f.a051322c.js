(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),u=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,m=p["".concat(o,".").concat(d)]||p[d]||b[d]||i;return t?r.a.createElement(m,c(c({ref:n},s),{},{components:t})):r.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(3),r=t(7),i=(t(0),t(116)),o={id:"read",title:"Reading Data",slug:"../dev-guide/high-level/read"},c={unversionedId:"dev_guide/high_level/read",id:"dev_guide/high_level/read",isDocsHomePage:!1,title:"Reading Data",description:"DynamoDB provides three main operations for reads:",source:"@site/docs/dev_guide/high_level/read.md",slug:"/dev_guide/dev-guide/high-level/read",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/read",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/dev_guide/high_level/read.md",version:"current",sidebar:"someSidebar",previous:{title:"Attributes",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes"},next:{title:"Writing Data",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/write"}},l=[{value:"Reading an Item",id:"reading-an-item",children:[]},{value:"Querying the Data",id:"querying-the-data",children:[{value:"Query Pagination",id:"query-pagination",children:[]},{value:"Query Projection",id:"query-projection",children:[]},{value:"Query Document Returns",id:"query-document-returns",children:[]},{value:"Useful links",id:"useful-links",children:[]}]},{value:"Scanning the Data",id:"scanning-the-data",children:[{value:"Parallel Scan",id:"parallel-scan",children:[]},{value:"Scan Pagination, Projection and Document returns",id:"scan-pagination-projection-and-document-returns",children:[]}]}],s={toc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"DynamoDB provides three main operations for reads:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GetItem")," - Read a single item."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Query")," - Get items from a single partition based on provided query expression."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Scan")," - Get all items from a table with a possibility to filter some of the results out.")),Object(i.b)("p",null,"DynamoDB also supports a ",Object(i.b)("inlineCode",{parentName:"p"},"BatchGetItem")," operation for executing up to 100 ",Object(i.b)("inlineCode",{parentName:"p"},"GetItem")," operations in a single request.\nIt's covered in ",Object(i.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/batch"},"batch operations guide"),"."),Object(i.b)("h2",{id:"reading-an-item"},"Reading an Item"),Object(i.b)("p",null,"To read an item from a DynamoDB table, use the ",Object(i.b)("inlineCode",{parentName:"p"},"GetItem")," operation.\nYou must provide a type marked by ",Object(i.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/attributes#dynamodbtable"},"DynamoDBTable")," attribute."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey");\n')),Object(i.b)("p",null,"You must specify the ",Object(i.b)("em",{parentName:"p"},"entire")," primary key, not just part of it.\nFor example, if a table has a composite primary key (partition key and sort key), you must supply a value for the partition key and a value for the sort key."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItemAsync<EntityClass>("partitionKey", "sortKey");\n')),Object(i.b)("p",null,"You can also use the fluent API when you need better control over the operation behavior."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var item = await ddbContext.GetItem<EntityClass>()\n    .WithConsistentRead(true)\n    .WithPrimaryKey("partitionKey", "sortKey")\n    .ToEntityAsync();\n')),Object(i.b)("p",null,"For more info, check the detailed ",Object(i.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/get-item"},"GetItem API reference")),Object(i.b)("h2",{id:"querying-the-data"},"Querying the Data"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," operation in Amazon DynamoDB finds items based on primary key values."),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," is a rather complicated operation, you can only use fluent API to perform it.\nYou must provide the ",Object(i.b)("inlineCode",{parentName:"p"},"KeyExpression")," in every request."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var query = ddbContext.Query<EntityClass>()\n    .WithKeyExpression(Condition<EntityClass>.On(x => x.Pk).EqualsTo("test"));\n    .BackwardSearch(true)\n    .WithLimit(100)\n    .FromIndex("indexName")\n\nvar items = await query.ToListAsync();\n')),Object(i.b)("p",null,"DynamoDB can only return up to 1 MB of data per response.\nIf your query contains more, DynamoDB will paginate the response.\nIn this case, ",Object(i.b)("inlineCode",{parentName:"p"},"ToListAsync()")," makes multiple calls until all the data is fetched and put into a single resulting array."),Object(i.b)("h3",{id:"query-pagination"},"Query Pagination"),Object(i.b)("p",null,"The easiest way to handle a paginated request manually is to use ",Object(i.b)("inlineCode",{parentName:"p"},"ToAsyncEnumerable()")," instead of ",Object(i.b)("inlineCode",{parentName:"p"},"ToListAsync()"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},"await foreach (var item in query.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n")),Object(i.b)("p",null,"There are also cases when you might need to manage pagination tokens yourself.\nTo do so, use the ",Object(i.b)("inlineCode",{parentName:"p"},"ToPageAsync()")," to get the pagination token in response and then pass it to the next request."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},"var page = await query.ToPageAsync();\n\nvar nextPage = await query.WithPaginationToken(page.PaginationToken).ToPageAsync();\n")),Object(i.b)("p",null,"Note: ",Object(i.b)("em",{parentName:"p"},"Due to the internals of the DynamoDB, ",Object(i.b)("inlineCode",{parentName:"em"},"page.Items")," being empty doesn't mean that there are no more data to read."),"\n",Object(i.b)("em",{parentName:"p"},"The only way to know that all data is retrieved is by checking the ",Object(i.b)("inlineCode",{parentName:"em"},"page.PaginationToken")," value. It is ",Object(i.b)("inlineCode",{parentName:"em"},"null")," when there are no more items to pull"),"."),Object(i.b)("h3",{id:"query-projection"},"Query Projection"),Object(i.b)("p",null,"TBD"),Object(i.b)("h3",{id:"query-document-returns"},"Query Document Returns"),Object(i.b)("p",null,"Sometimes, your queries return different entities in a single response.\nIt frequently happens when you utilize a single-table design."),Object(i.b)("p",null,"Fluent API allows you to return ",Object(i.b)("inlineCode",{parentName:"p"},"Document")," objects instead of your entities which you can convert to correct entities in applications code.\nE.g., consider the case where a single query returns the user's profile data and a list of his transactions."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var documents = await query.ToDocumentListAsync();\n\nvar userInfoDocument = documents.First(x => x["sortKey"].StartsWith("userInfo#")); // sort key prefix determines the \'type\' of item\nvar userInfo = ddbContext.ToObject<UserInfo>(userInfoDocument); // convert Document to entity class\n\nvar transactions = documents.Except(userInfoDocument) // assuming that all other items except user info are transactions\n                            .Select(x => ddbContext.ToObject<UserTransaction>(x))\n                            .ToList();\n')),Object(i.b)("h3",{id:"useful-links"},"Useful links"),Object(i.b)("p",null,"For more info, check the detailed ",Object(i.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/query"},"Query API reference")),Object(i.b)("h2",{id:"scanning-the-data"},"Scanning the Data"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Scan")," operation iterates over the whole table and returns values that satisfy ",Object(i.b)("inlineCode",{parentName:"p"},"FilterExpression")," if set.\nFluent API is the only option for high-level scanning."),Object(i.b)("p",null,"Unlike the ",Object(i.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Scan")," API doesn't have a ",Object(i.b)("inlineCode",{parentName:"p"},"ToListAsync()")," method to encourage better table design for your DB and correct scanning usage.\nThe closest replacement is ",Object(i.b)("inlineCode",{parentName:"p"},"ToAsyncEnumerable()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},'var scan = ddbContext.Scan<EntityClass>()\n    .WithFilterExpression(Condition<EntityClass>.On(x => x.Pk).EqualsTo("test"));\n    .BackwardSearch(true)\n    .WithLimit(100)\n    .FromIndex("indexName")\n\nawait foreach (var item in scan.ToAsyncEnumerable())\n{\n    // Process an item here.\n}\n')),Object(i.b)("h3",{id:"parallel-scan"},"Parallel Scan"),Object(i.b)("p",null,"DynamoDB supports parallel scans that are straightforward to use with EfficientDynamoDb.\nAll you need to do is decide the number of scanning segments and pass it in ",Object(i.b)("inlineCode",{parentName:"p"},"ToParallelAsyncEnumerable(...)")," method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csharp"},"var segmentsCount = 8;\n\nawait foreach (var item in scan.ToParallelAsyncEnumerable(segmentsCount))\n{\n    // Process an item here.\n}\n")),Object(i.b)("h3",{id:"scan-pagination-projection-and-document-returns"},"Scan Pagination, Projection and Document returns"),Object(i.b)("p",null,"These features in ",Object(i.b)("inlineCode",{parentName:"p"},"Scan")," API are identical to corresponding ones in ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," API."),Object(i.b)("p",null,"Check query docs here:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#query-pagination"},"Pagination")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#query-projection"},"Projection")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#query-document-returns"},"Document returns"))),Object(i.b)("p",null,"Definitive desctiption of ",Object(i.b)("inlineCode",{parentName:"p"},"Scan")," operation is available on ",Object(i.b)("a",{parentName:"p",href:"/EfficientDynamoDb/docs/api-reference/scan"},"Scan API reference")," page."))}u.isMDXComponent=!0}}]);