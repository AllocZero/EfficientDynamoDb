(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return b}));var i=t(3),a=t(7),o=(t(0),t(103)),r={id:"design",title:"Design Principles",sidebar_label:"Design Principles",slug:"../design"},s={unversionedId:"efficient_dynamo_db/design",id:"efficient_dynamo_db/design",isDocsHomePage:!1,title:"Design Principles",description:"EfficientDynamoDb is built with performance and scalability in mind. Our main goals are:",source:"@site/docs/efficient_dynamo_db/design.md",slug:"/design",permalink:"/EfficientDynamoDb/docs/design",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/efficient_dynamo_db/design.md",version:"current",sidebar_label:"Design Principles",sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/EfficientDynamoDb/docs/"},next:{title:"Installation",permalink:"/EfficientDynamoDb/docs/getting-started/installation"}},l=[{value:"Raw Performance",id:"raw-performance",children:[]},{value:"RAM Usage and GC Pressure",id:"ram-usage-and-gc-pressure",children:[]},{value:"Benchmarks",id:"benchmarks",children:[]}],c={toc:l};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"EfficientDynamoDb is built with performance and scalability in mind. Our main goals are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Reducing CPU cycles required to parse and serialize DynamoDB JSON."),Object(o.b)("li",{parentName:"ul"},"Reducing memory consumed by common operations.")),Object(o.b)("h2",{id:"raw-performance"},"Raw Performance"),Object(o.b)("p",null,"Main design decisions that greatly improves performance:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Direct DynamoDB JSON conversion to C# objects without intermediate entities."),Object(o.b)("li",{parentName:"ol"},"Custom low-level ",Object(o.b)("inlineCode",{parentName:"li"},"System.Text.Json")," serializer and deserializer thoroughly tuned for DynamoDB syntax."),Object(o.b)("li",{parentName:"ol"},"Using high-perfomance low-level C# features like spans, ref structs, stackallocs even for non-critical code paths.")),Object(o.b)("h2",{id:"ram-usage-and-gc-pressure"},"RAM Usage and GC Pressure"),Object(o.b)("p",null,"Allocations are slow. GC collections are slow. We mitigate both issues by keeping allocations count as low as possible. "),Object(o.b)("p",null,"Main solutions that help with memory pressure:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Excessive use of array pools for large arrays. "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"stackalloc")," for small arrays when applicable."),Object(o.b)("li",{parentName:"ol"},'Immutable fluent API specifically designed to allocate only set properties instead of having a single "god object".'),Object(o.b)("li",{parentName:"ol"},"Not reading redundant info from DDB responses, e.g., repeated data types and attribute names.")),Object(o.b)("h2",{id:"benchmarks"},"Benchmarks"),Object(o.b)("p",null,"Every performance decision must be backed by data. Benchmarking is the only way to tell which solution is faster in given context. "),Object(o.b)("p",null,"We use awesome ",Object(o.b)("a",{parentName:"p",href:"https://github.com/dotnet/BenchmarkDotNet"},"BenchmarkDotNet")," to make sure that performance improves with every new version."))}b.isMDXComponent=!0}}]);