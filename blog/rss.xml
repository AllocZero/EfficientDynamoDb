<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>EfficientDynamoDb Blog</title>
        <link>https://alloczero.github.io/EfficientDynamoDb/blog</link>
        <description>EfficientDynamoDb Blog</description>
        <lastBuildDate>Sun, 04 Feb 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[What's New in EfficientDynamoDb 0.9.15]]></title>
            <link>https://alloczero.github.io/EfficientDynamoDb/blog/whats-new-0.9.15</link>
            <guid>https://alloczero.github.io/EfficientDynamoDb/blog/whats-new-0.9.15</guid>
            <pubDate>Sun, 04 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[It has been a long time since the latest stable release of EfficientDynamoDb, but I'm glad to announce that v0.9.15 is finally here.]]></description>
            <content:encoded><![CDATA[<p>It has been a long time since the latest stable release of EfficientDynamoDb, but I'm glad to announce that <a href="https://github.com/AllocZero/EfficientDynamoDb/releases/tag/effddb-v0.9.15" target="_blank" rel="noopener noreferrer">v0.9.15</a> is finally here.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>This release brings support for the <code>ReturnValuesOnConditionCheckFailure</code> parameter in write requests, more predefined region endpoints, improved performance of error parsing, and XML docs for UpdateExpression builder.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-returnvaluesonconditioncheckfailure-feature">Support for <code>ReturnValuesOnConditionCheckFailure</code> feature<a href="#support-for-returnvaluesonconditioncheckfailure-feature" class="hash-link" aria-label="Direct link to support-for-returnvaluesonconditioncheckfailure-feature" title="Direct link to support-for-returnvaluesonconditioncheckfailure-feature">â€‹</a></h2><p>This parameter allows you to receive an item as it existed during the failed write attempt.
It aids in reducing RCU usage and latency for initiating an additional <code>GetItem</code> request to understand why exactly your condition check failed.</p><p>Let's consider the following example.
You are developing a warehouse management system or internet store that allows employees to adjust item quantity.
A simplified data model for an item might look similar to this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">[DynamoDbTable("items")]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public class Item </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">{</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    [DynamoDbProperty("pk", DynamoDbAttributeType.PartitionKey)]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public string WarehouseId { get; set; }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    [DynamoDbProperty("sk", DynamoDbAttributeType.SortKey)]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public string ItemId { get; set; }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    [DynamoDbProperty("quantity")]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public int Quantity { get; set; }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, imagine a situation where two employees are trying to sell the same item to customers at the same time.
In this case, you need to ensure that there are enough items in the warehouse before you finalize the deal.
And if there are not enough items for sale, inform the employee about how many items are currently available.</p><p>Before <code>ReturnValuesOnConditionCheckFailure</code>, the method that performs this function might look similar to this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public async Task SellItemsAsync(string warehouseId, string itemId, int quantity)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">{</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    try </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        await _context.UpdateItem&lt;Item&gt;()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .WithPrimaryKey(warehouseId, itemId)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .WithCondition(cond =&gt; cond.On(x =&gt; x.Balance).GreaterThanOrEqualTo(10))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .ExecuteAsync();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    catch (ConditionalCheckFailedException e)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        // Not enough items available but no way to tell how many are left.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        // So we need to perform an additional GetItem request.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        var item = await _context.GetItemAsync&lt;Item&gt;(warehouseId, itemId);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        throw new InsufficientInventoryException(item.Balance);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>There are two main issues with this approach:</p><ol><li>Additional RSU is used for the <code>GetItem</code> request, which increases your DynamoDB bill.
It becomes worse if you consider eventual consistency and opt for strongly consistent reads as they are twice as costly.</li><li>Additional latency is added due to a full round trip required for the <code>GetItem</code> request.</li></ol><p><code>ReturnValuesOnConditionCheckFailure</code> addresses both these problems:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">public async Task SellItemsAsync(string warehouseId, string itemId, int quantity)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">{</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    try </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        await _context.UpdateItem&lt;Item&gt;()</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .WithPrimaryKey(warehouseId, itemId)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .WithCondition(cond =&gt; cond.On(x =&gt; x.Balance).GreaterThanOrEqualTo(10))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .WithReturnValuesOnConditionCheckFailure(ReturnValuesOnConditionCheckFailure.AllOld)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            .ExecuteAsync();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    catch (ConditionalCheckFailedException e)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        // Now the exception contains `Item` property. </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        // It will be set only if WithReturnValuesOnConditionCheckFailure is set.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        // Note that it's a `Document` type that you can convert to an entity.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        var item = _context.ToEntity&lt;Wallet&gt;(e.Item!);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        throw new InsufficientInventoryException(item.Balance);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Using this approach, you receive the balance as it existed at the exact moment of the failed update request, without incurring additional costs or latency in your system.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p><code>ReturnValuesOnConditionCheckFailure</code> is available for all <a href="/EfficientDynamoDb/docs/dev-guide/high-level/write">single-item write operations</a> and <a href="/EfficientDynamoDb/docs/dev-guide/high-level/transact#transactwriteitems">transactional writes</a>.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-predefined-region-endpoints">More predefined region endpoints<a href="#more-predefined-region-endpoints" class="hash-link" aria-label="Direct link to More predefined region endpoints" title="Direct link to More predefined region endpoints">â€‹</a></h2><p>Since the initial release of EfficientDynamoDb, several new AWS regions have been introduced.
While it was always possible to <a href="/EfficientDynamoDb/docs/dev-guide/configuration/region-endpoint#create-regions-dynamically">create regions dynamically</a>, all regions supported by DynamoDB are now available as static properties of <code>RegionEndpoint</code>.</p><p>List of new regions added in EfficientDynamoDb 0.9.15:</p><ul><li><code>ap-south-2</code> - Asia Pacific (Hyderabad)</li><li><code>ap-southeast-3</code> - Asia Pacific (Jakarta)</li><li><code>ap-southeast-4</code> - Asia Pacific (Melbourne)</li><li><code>eu-central-2</code> - Europe (Zurich)</li><li><code>eu-south-2</code> - Europe (Spain)</li><li><code>me-central-1</code> - Middle East (UAE)</li><li><code>il-central-1</code> - Israel (Tel Aviv)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-improvements">Other improvements<a href="#other-improvements" class="hash-link" aria-label="Direct link to Other improvements" title="Direct link to Other improvements">â€‹</a></h2><ul><li>Error parsing was tuned to handle the most frequent DynamoDB errors more efficiently.</li><li>Added XML docs for UpdateExpression builder to improve developer experience.</li></ul>]]></content:encoded>
            <category>release</category>
            <category>dynamodb</category>
            <category>dotnet</category>
            <category>c#</category>
            <category>aws</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://alloczero.github.io/EfficientDynamoDb/blog/welcome</link>
            <guid>https://alloczero.github.io/EfficientDynamoDb/blog/welcome</guid>
            <pubDate>Tue, 30 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We're thrilled to announce our first publicly available Release Candidate version of EfficientDynamoDb.]]></description>
            <content:encoded><![CDATA[<p>We're thrilled to announce our first publicly available Release Candidate version of <a href="https://github.com/AllocZero/EfficientDynamoDb" target="_blank" rel="noopener noreferrer">EfficientDynamoDb</a>.</p><p>It aims to simplify major pain points of interacting with DynamoDB in C# that we faced in more than 4 years working with it:</p><ol><li>Unreasonably slow response processing. In some cases, parsing the result is slower than DynamoDB latency.</li><li>Expressions syntax (query, update, etc.) is not suitable for C# tooling. Using strings for expressions is highly error-prone, hides usages, makes refactoring challenging, and has no validation whatsoever.</li><li>Missing high-level APIs for transactions, batches, updates.</li><li>Poor out-of-the-box data types support (especially collections) and limited extensibility.</li></ol><p>We've put dozens of hours optimizing hot paths in our library to ensure that every single benchmark outperforms competitors. In some popular scenarios, EfficientDynamoDb can be up to 21x times faster and allocate 26x times less memory.</p><p>It's possible to build DDB expressions entirely in C# without using clumsy DDB expressions syntax and plain strings. Complicated operations like transactions, batches, updates, and parallel scans are easy to use via high-level API.</p><p>We have many ideas moving forward, like integrating composite keys, smart retry policies, supporting get-only properties, and so on. We'd love to hear the feedback from the community, so feel free to create an issue on <a href="https://github.com/AllocZero/EfficientDynamoDb" target="_blank" rel="noopener noreferrer">GitHub</a> or post your questions and suggestions here in the comments.</p>]]></content:encoded>
            <category>dynamodb</category>
            <category>dotnet</category>
            <category>c#</category>
            <category>aws</category>
        </item>
    </channel>
</rss>