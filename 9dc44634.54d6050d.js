(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(120)),i={id:"update-expression",title:"Building Update Expressions",slug:"../dev-guide/high-level/update-expression"},s={unversionedId:"dev_guide/high_level/update-expression",id:"dev_guide/high_level/update-expression",isDocsHomePage:!1,title:"Building Update Expressions",description:"This guide focuses on EfficientDynamoDb's API for building update expressions.",source:"@site/docs/dev_guide/high_level/update-expression.md",slug:"/dev_guide/dev-guide/high-level/update-expression",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/update-expression",editUrl:"https://github.com/alloczero/EfficientDynamoDb/edit/master/website/docs/dev_guide/high_level/update-expression.md",version:"current",sidebar:"someSidebar",previous:{title:"Building Conditions",permalink:"/EfficientDynamoDb/docs/dev_guide/dev-guide/high-level/conditions"},next:{title:"Low-Level API",permalink:"/EfficientDynamoDb/docs/dev-guide/low-level"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Getting started",id:"getting-started",children:[{value:"Using value from another attribute",id:"using-value-from-another-attribute",children:[]}]},{value:"Arithmetic operations",id:"arithmetic-operations",children:[]},{value:"Collection operations",id:"collection-operations",children:[{value:"Removing from collections",id:"removing-from-collections",children:[]}]},{value:"Removing a property",id:"removing-a-property",children:[]}],l={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This guide focuses on EfficientDynamoDb's API for building update expressions.\nIt's assumed that you are already familiar with update expressions in DynamoDb.\nIf not, please check out ",Object(o.b)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html"},"official AWS docs")," for a better understanding of topics covered in this section."),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"Much like condition expressions builder API, update expressions API in EfficientDynamoDb makes it easy to perform complex updates.\nYou don't need to think about reserved words, attribute names escaping and other low-level DynamoDB stuff."),Object(o.b)("h2",{id:"getting-started"},"Getting started"),Object(o.b)("p",null,"You can build update expression as part of the ",Object(o.b)("inlineCode",{parentName:"p"},"UpdateItem")," request."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.FirstName).Assign("John")\n    .ExecuteAsync();\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"On(...)")," accepts an expression that should point to a property marked by ",Object(o.b)("inlineCode",{parentName:"p"},"DynamoDBProperty")," attribute, element inside the collection, or the nested property of another object."),Object(o.b)("h3",{id:"using-value-from-another-attribute"},"Using value from another attribute"),Object(o.b)("p",null,"You can use another attribute in update operation instead of outside value."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.LastName).Assign(x => x.FirstName)\n    .ExecuteAsync();\n")),Object(o.b)("p",null,"Such overloads also allows to provide a fallback value that will be used when attribute not exists."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.LastName).Assign(x => x.FirstName, "Fallback Name")\n    .ExecuteAsync();\n')),Object(o.b)("h2",{id:"arithmetic-operations"},"Arithmetic operations"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"AssignSum")," and ",Object(o.b)("inlineCode",{parentName:"p"},"AssignSubtraction")," methods to increment or decrement attributes."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Age).AssignSum(x => x.Age, 1) // increment age\n    .On(x => x.CacheTtl).AssignSubtraction(x => x.CacheTtl, 10) // reduce cache TTL by 10 (seconds)\n    .ExecuteAsync();\n")),Object(o.b)("p",null,"It's possible to assign a sum of two attributes to the third one:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Age).AssignSum(x => x.FirstProperty, x => x.SecondProperty)\n    .ExecuteAsync();\n")),Object(o.b)("p",null,"Every expression may have a fallback value to handle the case when attribute not exists."),Object(o.b)("h2",{id:"collection-operations"},"Collection operations"),Object(o.b)("p",null,"The main operation to concatenate collections is ",Object(o.b)("inlineCode",{parentName:"p"},"AssignConcat(...)"),".\nIt can be used for any possible concatenation scenario, but there are also ",Object(o.b)("inlineCode",{parentName:"p"},"Append(...)")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Prepend(...)")," methods to simplify mutating the collection inplace."),Object(o.b)("p",null,"Appeding example. Both calls are doing the same thing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).AssignConcat(x => x.Friends, new [] {"New friend"})\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).Append(new [] {"New friend"})\n    .ExecuteAsync();\n')),Object(o.b)("p",null,"Prepending example. Both calls are doing the same thing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},'ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).AssignConcat(new [] {"New friend"}, x => x.Friends)\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends).Prepend(new [] {"New friend"})\n    .ExecuteAsync();\n')),Object(o.b)("p",null,"To update ",Object(o.b)("inlineCode",{parentName:"p"},"SET"),"-like collections, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"Insert(...)")," method:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.UniqueValues).Insert(newUniqueValue)\n    .ExecuteAsync();\n")),Object(o.b)("h3",{id:"removing-from-collections"},"Removing from collections"),Object(o.b)("p",null,"Removing element from a list can be done by index:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Friends[2]).Remove()\n    .ExecuteAsync();\n")),Object(o.b)("p",null,"To remove elements from the set, you need to pass a subset to remove:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.UniqueValues).Remove(new HashSet<int>() {1, 2, 3})\n    .ExecuteAsync();\n")),Object(o.b)("h2",{id:"removing-a-property"},"Removing a property"),Object(o.b)("p",null,"You can remove any top level property, nested property or a list member by calling the parameterless ",Object(o.b)("inlineCode",{parentName:"p"},"Remove()")," method:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csharp"},"ddbContext.UpdateItem<EntityClass>()\n    .On(x => x.SomeProperty).Remove()\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.Array[3]).Remove()\n    .ExecuteAsync();\n\nddbContext.UpdateItem<EntityClass>()\n    .On(x => x.TopLvl.Nested).Remove()\n    .ExecuteAsync();\n")))}p.isMDXComponent=!0}}]);